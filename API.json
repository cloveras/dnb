{
  "swagger" : "2.0",
  "info" : {
    "description" : "**IMPORTANT:** Contains (most of) 7580 APIs, plus additional drafts. This file may not contain all changes in the 7580 APIs. Questions? Contact cl@dnb.no.\n\n**Guidelines:**\n\n* camelCase, starting with lowercase: ```customerEngagement```, ```accountNumber```, ```creditCard```, etc.\n* Refer to standards, and use examples for all properties and values.\n* General rule: Response (object) determines endpoint: If reponse is ```account```, the endpoint should start with ```/accounts```. In cases where this may be up for discussion, multiple endpoints may be available for some time in order to evaluate.\n\n**Standards:**\n\nAPIs must use ISO and RFC standards. \n\n* Country: ISO 3166-1 alpha-2: : https://www.iso.org/standard/63546.html (```NO```, ```GB```, ```US```)\n* Currency: ISO 4217: alpha 3-letter upcase: https://www.iso.org/iso-4217-currency-codes.html (```NOK```, ```EUR```, ```USD```)\n* Date: ISO 8601:  www.iso.org/iso/home/standards/iso8601.htm (date: ```2018-12-31```, timestamp: ```2018-12-31T23:59:59+01:00```)\n* SWIFT BIC: ISO 9362: https://en.wikipedia.org/wiki/ISO_9362 (```DNBANOKKXXX```)\n* IBAN ISO 13616:2007: https://www.iso.org/standard/41031.html (```NO9386011117947```)\n* MCC: ISO 18245: https://www.iso.org/standard/33365.html (https://github.com/greggles/mcc-codes) (```3514: Hotels/Motels/Inns/Resorts```)\n\n**HTTP Response Codes**\n\nHTTP reponse codes in Open Bank may be more detailed than in Shared Sertvices and layers below. The HTTP reponses below is a good starting point, and may be updated if needed. \n\nSuccess\n\n* ```200: OK``` https://httpstatuses.com/200 / https://tools.ietf.org/html/rfc7231#section-6.3.1     \n* ```201: Created``` https://httpstatuses.com/201 / https://tools.ietf.org/html/rfc7231#section-6.3.2\n\nClient Error\n\n* ```400: Bad Request``` https://httpstatuses.com/400 / https://tools.ietf.org/html/rfc7231#section-6.5.1     \n* ```401: Unauthorized``` https://httpstatuses.com/401 / https://tools.ietf.org/html/rfc7235#section-3.1      \n* ```403: Forbidden``` https://httpstatuses.com/403 / https://tools.ietf.org/html/rfc7231#section-6.5.3     \n* ```404: Not Found``` https://httpstatuses.com/404 / https://tools.ietf.org/html/rfc7231#section-6.5.4      \n* ```429: Too Many Requests``` https://httpstatuses.com/429 / https://tools.ietf.org/html/rfc6585#section-4  \n\nServer Error\n\n* ```500: Server Error``` https://httpstatuses.com/500 / https://tools.ietf.org/html/rfc7231#section-6.6.1     \n* ```503: Service Unavailable``` https://httpstatuses.com/503 / https://tools.ietf.org/html/rfc7231#section-6.6.503\n* ```504: Timeout``` https://httpstatuses.com/504 / https://tools.ietf.org/html/rfc7231#section-6.6.5    \n\n**Github**\n\nFull Swagger documentation and links to other generated documentation si available on Github: https://github.com/cloveras/dnb/\n\n\n",
    "version" : "0.5",
    "title" : "API Drafts + 7580",
    "termsOfService" : "",
    "contact" : {
      "name" : "Christian Løverås",
      "url" : "https://dnb.no",
      "email" : "cl@dnb.no"
    }
  },
  "host" : "a1r3mp0.restletmocks.net",
  "schemes" : [ "https" ],
  "consumes" : [ "application/json" ],
  "produces" : [ "application/json" ],
  "security" : [ {
    "OAuth2" : [ "read", "write" ]
  } ],
  "paths" : {
    "/customers/{customerId}/profile" : {
      "get" : {
        "tags" : [ "Customers" ],
        "summary" : "Get customer profile",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/customerProfile"
            }
          },
          "404" : {
            "description" : "Status 404"
          }
        }
      },
      "post" : {
        "tags" : [ "Customers" ],
        "summary" : "Create/update customer profile",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/customerProfile"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      },
      "delete" : {
        "tags" : [ "Customers" ],
        "summary" : "Delete customer profile",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      },
      "parameters" : [ {
        "name" : "customerId",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/customers/{customerId}/about" : {
      "get" : {
        "tags" : [ "Customers" ],
        "summary" : "Get detailed customer information.",
        "description" : "Nice if this is different from /customers/{customerId}.",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/customer"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Customers" ],
        "summary" : "Update customer details",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/customer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      },
      "parameters" : [ {
        "name" : "customerId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "social security number (personnummer), 9 digits. Example: 123456789"
      } ]
    },
    "/customers/{customerId}/score" : {
      "get" : {
        "tags" : [ "Customers" ],
        "summary" : "Get customer score",
        "description" : "Customer score with all details.",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/customerScore"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Customers" ],
        "summary" : "Create/update customer score",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/customerScore"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      },
      "delete" : {
        "tags" : [ "Customers" ],
        "summary" : "Delete customer score",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      },
      "parameters" : [ {
        "name" : "customerId",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/customers/{customerId}/accounts" : {
      "get" : {
        "tags" : [ "Customers" ],
        "summary" : "Accounts overview (list of accounts).",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/account"
              }
            }
          },
          "404" : {
            "description" : "No accounts."
          }
        }
      },
      "parameters" : [ {
        "name" : "customerId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "social security number (personnummer), 9 digits. Example: 123456789"
      } ]
    },
    "/customers/current" : {
      "get" : {
        "tags" : [ "Customers" ],
        "summary" : "Get current customer's details",
        "description" : "Get current ```customer``` details. The ```customerId```is included in the context object.",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Customer found",
            "schema" : {
              "$ref" : "#/definitions/customer"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      }
    },
    "/customers/{customerId}" : {
      "get" : {
        "tags" : [ "Customers" ],
        "summary" : "Get customer's details by id",
        "description" : "Get ```customer``` details by id.",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Customer found",
            "schema" : {
              "$ref" : "#/definitions/customer"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "customerId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "x-example" : "1234567890"
      } ]
    },
    "/accounts/{account}/name" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "summary" : "Get account name",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/account"
            }
          },
          "404" : {
            "description" : "Account not found."
          }
        }
      },
      "post" : {
        "tags" : [ "Accounts" ],
        "summary" : "Change account name",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/account"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      },
      "delete" : {
        "tags" : [ "Accounts" ],
        "summary" : "Delete account name",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          },
          "401" : {
            "description" : "Status 401"
          },
          "404" : {
            "description" : "Status 404"
          }
        }
      },
      "parameters" : [ {
        "name" : "account",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Account number, 11 digits."
      } ]
    },
    "/accounts/{account}/balance" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "summary" : "Get account balance",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/accountBalance"
            }
          },
          "401" : {
            "description" : "No balance for you."
          },
          "404" : {
            "description" : "Account not found."
          },
          "417" : {
            "description" : "Expectation Failed: Requires prior (paranormal) transfer of customer's expectation (haha)."
          }
        }
      },
      "parameters" : [ {
        "name" : "account",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Account number, 11 digits."
      } ]
    },
    "/accounts/{account}/safetospend" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "summary" : "Get \"safe to spend\" amount",
        "description" : "The current balance, minus known outgoing transactions, plus known incoming transactions. ",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Here it is! Don't spend it all at once.",
            "schema" : {
              "type" : "number"
            }
          },
          "401" : {
            "description" : "Hmmm, not really your account, is it?"
          }
        }
      },
      "parameters" : [ {
        "name" : "account",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Account number, 11 digits."
      } ]
    },
    "/accounts/{account}/statement/{year}/{month}" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "summary" : "Get account statement",
        "description" : "Account statement for specified account, year and month. Some meta data, and a list of all transactions. ",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/accountStatement"
            }
          },
          "404" : {
            "description" : "Status 404"
          }
        }
      },
      "parameters" : [ {
        "name" : "account",
        "in" : "path",
        "required" : true,
        "type" : "string"
      }, {
        "name" : "year",
        "in" : "path",
        "required" : true,
        "type" : "string"
      }, {
        "name" : "month",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/accounts/{account}/transactionlist" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "summary" : "Get transactionlist for one account",
        "description" : "Supports pagination: pagesize and pagenumber,",
        "parameters" : [ {
          "name" : "pagesize",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "pagenumber",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/transaction"
              }
            }
          },
          "404" : {
            "description" : "Status 404"
          }
        }
      },
      "parameters" : [ {
        "name" : "account",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/accounts/{account}/transactionlist/{year}/{month}" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "summary" : "List of transactions for one month",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/transaction"
              }
            }
          },
          "400" : {
            "description" : "Invalid parameters?"
          },
          "401" : {
            "description" : "Status 401"
          },
          "404" : {
            "description" : "No transactions."
          }
        }
      },
      "parameters" : [ {
        "name" : "account",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Account number, 11 digits. Example: 12345678910"
      }, {
        "name" : "year",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Year, 4 digits. Example: 2017"
      }, {
        "name" : "month",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Month, 2 digits (January is 01). Example: 01"
      } ]
    },
    "/account/deposit/{ownerid}/{lenderid}" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "summary" : "Get information about deposit account",
        "description" : "Need to provide more than an Account object, but then again this is a draft/note only.",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/account"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Accounts" ],
        "summary" : "Open deposit acount",
        "description" : "For now: Using Account object with SSIDs of tennant and owner. \n\nRequired:\n* Electronic copy of signed rental agreement\n* The address of the apartment (or license details for car, boat, etc)\n* Name, SSN, email, phone of the lender (or is SSN sufficient, at least for existing DNB customers?)\n\nUse a Customer object?\n\nDNB deposit account: https://www.dnb.no/privat/nettbank-mobil-og-kort/konto/depositumskonto.html ",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      },
      "delete" : {
        "tags" : [ "Accounts" ],
        "summary" : "Delete deposit account",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Account deleted"
          },
          "401" : {
            "description" : "Status 401"
          },
          "404" : {
            "description" : "Status 404"
          }
        }
      },
      "parameters" : [ {
        "name" : "ownerid",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Personal id number (SSN) of the \"owner\" for the artifact this deposit account is security for, 11 digits."
      }, {
        "name" : "lenderid",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Personal id number (SSN) of the \"lender\" for the artifact this deposit account is security for, 11 digits."
      } ]
    },
    "/accounts" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "summary" : "Get all accounts for current user",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/account"
              }
            }
          },
          "400" : {
            "description" : "Status 400",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Status 404",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      }
    },
    "/accounts/{accountNumber}" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "summary" : "Get account details",
        "description" : "Returns Account.",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "$ref" : "#/definitions/accountDetails"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "customerId unknown",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "accountNumber",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "x-example" : "12345678901"
      } ]
    },
    "/accounts/{accountNumber}/balances" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "summary" : "Get account balances",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "$ref" : "#/definitions/accountBalance"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "accountNumber",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "x-example" : "12345678901"
      } ]
    },
    "/accounts/{accountNumber}/transactions" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "summary" : "Get transaction list for account",
        "description" : "Optional query parameters below. Note: Sorting and filtering affects backend, and may change.\n\n* SortOrder: \"ASC\", \"DESC\"\n* DateFrom: \"YYYY-MM-DD\": ISO 8601: www.iso.org/iso/home/standards/iso8601.htm\n* DateTo: \"YYYY-MM-DD\": ISO 8601: www.iso.org/iso/home/standards/iso8601.htm\n* AmountMinimum: Include amount from (and including) this amount.\n* AmountMaximum: Include amount from (and including) this amount.\n* MCC: Include only this MCC code: ISO 18245: https://www.iso.org/standard/33365.html \n* FreeText: Filter by free text\n* IncludePending: **TODO:** Determine if this should be included, or refer to /payments/due/{accountNumber}",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SortOrder",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "description" : "Ascending, descending",
          "x-example" : "ASC"
        }, {
          "name" : "DateFrom",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "format" : "date",
          "description" : "Filter for start date (included). ISO 8601: www.iso.org/iso/home/standards/iso8601.htm",
          "x-example" : "2018-01"
        }, {
          "name" : "DateTo",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "format" : "date",
          "description" : "Filter for end date (included). ISO 8601: www.iso.org/iso/home/standards/iso8601.htm",
          "x-example" : "2018-02"
        }, {
          "name" : "AmountMinimum",
          "in" : "query",
          "required" : false,
          "type" : "number",
          "description" : "Filter for minimum amount (included). No decimals.",
          "x-example" : 500.0
        }, {
          "name" : "AmountMaximum",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "description" : "Filter for maximum amount (included). No decimals.",
          "x-example" : "10000"
        }, {
          "name" : "MCC",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "description" : "Filter for MCC. Use code only.",
          "x-example" : "3514"
        }, {
          "name" : "FreeText",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "description" : "Filter for free text. Case insensitive.",
          "x-example" : "\"vipps\""
        }, {
          "name" : "IncludePending",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "description" : "Should pending transactions be included?"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/transaction"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "accountNumber",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "x-example" : "12345678901"
      } ]
    },
    "/accounts/{accountNumber}/transactions/{transactionId}" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "summary" : "Get transaction specified by id",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "$ref" : "#/definitions/transaction"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "accountNumber",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "x-example" : "12345678901"
      }, {
        "name" : "transactionId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "x-example" : "12345"
      } ]
    },
    "/accounts/{accountNumber}/payments/due" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "summary" : "Get due payments for account by date range",
        "parameters" : [ {
          "name" : "startDate",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "format" : "date",
          "description" : "YYYY-MM-DD”: ISO 8601: www.iso.org/iso/home/standards/iso8601.htm",
          "x-example" : "2018-01-01"
        }, {
          "name" : "stopDate",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "description" : "YYYY-MM-DD”: ISO 8601: www.iso.org/iso/home/standards/iso8601.htm",
          "x-example" : "2018-12-31"
        } ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/payment"
              }
            }
          },
          "400" : {
            "description" : "Status 400",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Status 404",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "accountNumber",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "x-example" : "12345678901"
      } ]
    },
    "/accounts/{accountNumber}/payments/due/{paymentId}" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "summary" : "Get details for a payment for an account",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/payment"
            }
          },
          "400" : {
            "description" : "Status 400",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Status 404",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "accountNumber",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "x-example" : "12345678901"
      }, {
        "name" : "paymentId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "x-example" : "12345"
      } ]
    },
    "/accounts/{accountNumber}/disponents" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "summary" : "Get account disponents",
        "description" : "Get all (if any) disponents for an account",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/customer"
              }
            }
          },
          "401" : {
            "description" : "Status 401"
          },
          "404" : {
            "description" : "Status 404"
          }
        }
      },
      "delete" : {
        "tags" : [ "Accounts" ],
        "summary" : "Delete account disponents",
        "description" : "Delete all",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          },
          "401" : {
            "description" : "Status 401"
          },
          "404" : {
            "description" : "Status 404"
          }
        }
      },
      "patch" : {
        "summary" : "Update account disponents",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          },
          "401" : {
            "description" : "Status 401"
          },
          "404" : {
            "description" : "Status 404"
          }
        }
      },
      "parameters" : [ {
        "name" : "accountNumber",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/cards" : {
      "get" : {
        "tags" : [ "Card" ],
        "summary" : "Get cards for current customer",
        "description" : "List over the current ```customer```'s debet and credit cards. ",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/card"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      }
    },
    "/cards/{cardId}/details" : {
      "get" : {
        "tags" : [ "Card" ],
        "summary" : "Get card details",
        "description" : "Includes balance and credit limit (when applicable).",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "$ref" : "#/definitions/card"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "cardId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "x-example" : "12345678901"
      } ]
    },
    "/cards/{cardId}/transactions" : {
      "get" : {
        "tags" : [ "Card" ],
        "summary" : "Get card transactions",
        "description" : "Transactionlist for the customers creditcard",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/transaction"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "cardId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "x-example" : "12345678901"
      } ]
    },
    "/cards/{cardId}/block" : {
      "patch" : {
        "tags" : [ "Card" ],
        "summary" : "Block card",
        "description" : "Aviability for end-customet to block a debit or credit card. (Not Cresco Cards)",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "The card is now blocked",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "examples" : {
              "application/json" : "ReasonCode"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "cardId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "x-example" : "12345678901"
      } ]
    },
    "/cards/{cardId}/unblock" : {
      "patch" : {
        "tags" : [ "Card" ],
        "summary" : "Unblock card",
        "description" : "Unblock a blocked ```card```.",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Unblocked"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "cardId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "x-example" : "12345678901"
      } ]
    },
    "/cards/{cardId}/invoice/{year}/{month}" : {
      "get" : {
        "tags" : [ "Card" ],
        "summary" : "Get card invoice",
        "description" : "Get card invoice form chosen month",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "$ref" : "#/definitions/cardInvoice"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "cardId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "x-example" : "12345678901"
      }, {
        "name" : "year",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "YYYY",
        "x-example" : "2018"
      }, {
        "name" : "month",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "MM, where January is 01",
        "x-example" : "01"
      } ]
    },
    "/payments" : {
      "post" : {
        "tags" : [ "Payments" ],
        "summary" : "Initiate payment",
        "description" : "Domestic payment with KID or message.\n\nReturns HTTP 201 and the ```PaymentId``` of successfully created payment.",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/paymentInitiation"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "type" : "string",
              "description" : "Returning id of the new payment"
            },
            "examples" : {
              "application/json" : "1234567890"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      }
    },
    "/payments/{accountNumber}/due" : {
      "get" : {
        "tags" : [ "Payments" ],
        "summary" : "Get due payments by date range",
        "description" : "Gets all due ```payment```s, both domestic and international.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "accountNumber",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "x-example" : "12345678901"
        }, {
          "name" : "startDate",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "format" : "date",
          "description" : "\"YYYY-MM-DD\": ISO 8601: www.iso.org/iso/home/standards/iso8601.htm",
          "x-example" : "2018-01-01"
        }, {
          "name" : "stopDate",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "format" : "date",
          "description" : "\"YYYY-MM-DD\": ISO 8601: www.iso.org/iso/home/standards/iso8601.htm",
          "x-example" : "2018-12-31"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/payment"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "accountNumber",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/payments/{accountNumber}/due/{paymentId}" : {
      "get" : {
        "tags" : [ "Payments" ],
        "summary" : "Get due payment by payment id",
        "description" : "Returns ```payment,``` complete with with ```paymentDetails```.\n\nThis endpoint may change, as it is offers the same as ```accounts/{accountNumber}/payments/due/{paymentId}```, and the placement is not decided yet.",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "$ref" : "#/definitions/payment"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "accountNumber",
        "in" : "path",
        "required" : true,
        "type" : "string"
      }, {
        "name" : "paymentId",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/payments/{paymentId}" : {
      "delete" : {
        "tags" : [ "Payments" ],
        "summary" : "Delete payment by id",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Gone forever"
          },
          "400" : {
            "description" : "Status 400"
          },
          "401" : {
            "description" : "Status 401"
          },
          "403" : {
            "description" : "Status 403"
          },
          "404" : {
            "description" : "Unknown paymentId"
          }
        }
      },
      "patch" : {
        "tags" : [ "Payments" ],
        "summary" : "Update existing payment",
        "description" : "A payment can be updatet until due dtae. \nPossible to udate :\n* Date (\"YYYY-MM-DD\", ISO 8601: www.iso.org/iso/home/standards/iso8601.htm)\n* Amount\n* Status (deactivate, reactivate)\n\nReturns the updated Payment.",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Changed",
            "schema" : {
              "$ref" : "#/definitions/payment"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "paymentId",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/transactions/{transactionid}" : {
      "get" : {
        "tags" : [ "Transactions" ],
        "summary" : "Get transaction details",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/transaction"
            }
          },
          "401" : {
            "description" : "Status 401"
          },
          "404" : {
            "description" : "Status 404"
          }
        }
      },
      "post" : {
        "tags" : [ "Transactions" ],
        "summary" : "Create transaction",
        "description" : "TBD. Needs a lot more details. Just a note, really.",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/transaction"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      },
      "delete" : {
        "tags" : [ "Transactions" ],
        "summary" : "Delete (stop) transaction",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          },
          "401" : {
            "description" : "Not for you."
          },
          "403" : {
            "description" : "Too late?"
          }
        }
      },
      "parameters" : [ {
        "name" : "transactionid",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "id"
      } ]
    },
    "/transactions/category/{mcc}/{account}" : {
      "get" : {
        "tags" : [ "Transactions" ],
        "summary" : "Get transactions with code MCC for one account",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/transaction"
              }
            }
          },
          "401" : {
            "description" : "Status 401"
          },
          "404" : {
            "description" : "Status 404"
          }
        }
      },
      "parameters" : [ {
        "name" : "mcc",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "MCC: Merchant Category Code: https://en.wikipedia.org/wiki/Merchant_category_code"
      }, {
        "name" : "account",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Account number, 11 digits."
      } ]
    },
    "/transactions/sepa" : {
      "post" : {
        "tags" : [ "Transactions" ],
        "summary" : "Create new SEPA transfer",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SEPA-request"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/SEPA-response"
            }
          }
        }
      }
    },
    "/loans/{loanid}" : {
      "get" : {
        "tags" : [ "Loans" ],
        "summary" : "Details of this loan",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/loan"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Loans" ],
        "summary" : "Delete loan",
        "description" : "Downpayment first.",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          },
          "404" : {
            "description" : "Status 404"
          }
        }
      },
      "parameters" : [ {
        "name" : "loanid",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/loans/apply" : {
      "post" : {
        "tags" : [ "Loans" ],
        "summary" : "Apply for a new loan",
        "description" : "Need to POST quite a bit of data, and also handle AML, KYC, etc",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "type" : "object",
            "properties" : {
              "customer" : {
                "$ref" : "#/definitions/customer"
              },
              "loan" : {
                "$ref" : "#/definitions/loan"
              }
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      }
    },
    "/loans/downpay/{loanid}" : {
      "post" : {
        "tags" : [ "Loans" ],
        "summary" : "Downpay entire loan (settle).",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      },
      "parameters" : [ {
        "name" : "loanid",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "The loan to downpay."
      } ]
    },
    "/preapproval/{loanid}" : {
      "get" : {
        "tags" : [ "Loans" ],
        "summary" : "Get details of preapproval",
        "description" : "For now: Returns a Loan object.",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/loan"
            }
          },
          "404" : {
            "description" : "Status 404"
          }
        }
      },
      "parameters" : [ {
        "name" : "loanid",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/preapproval/{personnr}/{desiredamount}" : {
      "get" : {
        "tags" : [ "Loans" ],
        "summary" : "Check if the person has approval",
        "description" : "Optional parameters: County (kommunenummer), gnr (gårdsnummer) and bnr (bruksnummer ) may be used to specify which property the preapproval is being checked for. This may allow DNB to find out that the preapproval holder is in a bidding process.",
        "parameters" : [ {
          "name" : "county",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "description" : "Number of the county (kommune).",
          "x-example" : "1865"
        }, {
          "name" : "gnr",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "description" : "Gårdsnummer.",
          "x-example" : "55"
        }, {
          "name" : "bnr",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "description" : "Bruksnummer.",
          "x-example" : "34"
        } ],
        "responses" : {
          "200" : {
            "description" : "Sufficient funds"
          },
          "401" : {
            "description" : "Status 401"
          },
          "404" : {
            "description" : "This person does not have financing for the specified amount."
          },
          "429" : {
            "description" : "To prevent repeated attempts at guessing the \"desiredamount\"."
          }
        }
      },
      "post" : {
        "tags" : [ "Loans" ],
        "summary" : "Apply for preapproval",
        "description" : "For now apply for a specified amount only. If the amouhnt specified is 0 (zero), the application will be treated as for the maximum possible amount.",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/loan"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      },
      "parameters" : [ {
        "name" : "personnr",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "11-digit personal id number"
      }, {
        "name" : "desiredamount",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "How much?"
      } ]
    },
    "/preapproval/delete/{personnr}" : {
      "delete" : {
        "tags" : [ "Loans" ],
        "summary" : "Delete preapproval",
        "description" : "When a loan is issued, either by DNB or another bank, the preapproval should be deleted.\nSeparate method to avoid specifying amount. \"Personnr\" is sufficient.",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          },
          "401" : {
            "description" : "Status 401"
          },
          "404" : {
            "description" : "Status 404"
          }
        }
      },
      "parameters" : [ {
        "name" : "personnr",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/currency/list/{base}" : {
      "get" : {
        "tags" : [ "Currencies" ],
        "summary" : "Get a list rates for the most common currencies, with a specified base",
        "description" : "Suitable for making a table or similar.\n\n```\n{\n    disclaimer: \"http://api.dnb.no/diclaimer_goes_here/\",\n    license: \"http://api.dnb.no/license_goes_here/\",\n    timestamp: 1504548341,\n    base: \"NOK\",\n    rates: {\n        AED: 3.672538,\n        AFN: 66.809999,\n        ALL: 125.716501,\n        AMD: 484.902502,\n        ANG: 1.788575,\n        AOA: 135.295998,\n        ARS: 9.750101,\n        AUD: 1.390866,\n        /* ... */\n    }\n}\n```",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "type" : "string"
            },
            "examples" : {
              "application/json" : "AED: 3.672538"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "base",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "\"Home\" currency. ISO 4217: alpha 3-letter upcase e.g EUR"
      } ]
    },
    "/currency/convert/{base}/{currency}/{amount}" : {
      "get" : {
        "tags" : [ "Currencies" ],
        "summary" : "Convert amount from CUR1 to CUR2",
        "description" : "Quite basic for now. Possibly add parameters for markup/margin, specify a date, find min/max in an interval (separate method?), etc.\n\nTime series is a likely feature - see OXR's API: https://docs.openexchangerates.org/docs/time-series-json\n\n```\n{\n    \"disclaimer\": \"https://openexchangerates.org/terms/\",\n    \"license\": \"https://openexchangerates.org/license/\",\n    \"start_date\": \"2013-01-01\",\n    \"end_date\": \"2013-01-31\",\n    \"base\": \"AUD\",\n    \"rates\": {\n        \"2013-01-01\": {\n            \"BTC\": 0.0778595876,\n            \"EUR\": 0.785518,\n            \"HKD\": 8.04136\n        },\n        \"2013-01-02\": {\n            \"BTC\": 0.0789400739,\n            \"EUR\": 0.795034,\n            \"HKD\": 8.138096\n        },\n        \"2013-01-03\": {\n            \"BTC\": 0.0785299961,\n            \"EUR\": 0.80092,\n            \"HKD\": 8.116954\n        },\n        /* ... */\n    }\n\n```",
        "parameters" : [ {
          "name" : "date",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "format" : "date",
          "description" : "End of day."
        } ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          },
          "404" : {
            "description" : "Status 404"
          }
        }
      },
      "parameters" : [ {
        "name" : "base",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "ISO 4217: alpha 3-letter upcase e.g EUR"
      }, {
        "name" : "currency",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "ISO 4217: alpha 3-letter upcase e.g EUR"
      }, {
        "name" : "amount",
        "in" : "path",
        "required" : true,
        "type" : "integer",
        "format" : "int32"
      } ]
    },
    "/currencies/convert/{base}/{currency}/{amount}" : {
      "get" : {
        "tags" : [ "Currencies" ],
        "summary" : "Convert amount from CUR1 to CUR2",
        "description" : "Quite basic for now. Input welcome.",
        "parameters" : [ {
          "name" : "date",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "format" : "date",
          "description" : "End of day. ISO 8601: \"YYYY-MM-DD\": https://en.wikipedia.org/wiki/ISO_8601",
          "x-example" : "2018-12-31"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "$ref" : "#/definitions/currencyRate"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "base",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "ISO 4217: alpha 3-letter upcase e.g EUR",
        "x-example" : "NOK"
      }, {
        "name" : "currency",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "ISO 4217: alpha 3-letter upcase e.g EUR",
        "x-example" : "GBP"
      }, {
        "name" : "amount",
        "in" : "path",
        "required" : true,
        "type" : "number",
        "x-example" : 100.0
      } ]
    },
    "/currencies/list/{base}" : {
      "get" : {
        "tags" : [ "Currencies" ],
        "summary" : "Get a list rates for the most common currencies, with a specified base",
        "description" : "Suitable for making a table or similar.\n\n```\n{\n    timestamp: 1504548341,\n    base: \"NOK\",\n    rates: {\n        AED: 3.672538,\n        AFN: 66.809999,\n        ALL: 125.716501,\n        AMD: 484.902502,\n        ANG: 1.788575,\n        AOA: 135.295998,\n        ARS: 9.750101,\n        AUD: 1.390866,\n        /* ... */\n    }\n}\n```",
        "parameters" : [ {
          "name" : "date",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "description" : "End of day. ISO 8601: “YYYY-MM-DD”: https://en.wikipedia.org/wiki/ISO_8601",
          "x-example" : "2018-12-31"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/currencyRate"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "base",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "\"Home\" currency. ISO 4217: alpha 3-letter upcase",
        "x-example" : "NOK"
      } ]
    },
    "/insurance/{policynumber}" : {
      "get" : {
        "tags" : [ "Insurances" ],
        "summary" : "Get insurance details",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/insurance"
            }
          },
          "401" : {
            "description" : "Status 401"
          },
          "404" : {
            "description" : "Unknown policy number."
          }
        }
      },
      "post" : {
        "tags" : [ "Insurances" ],
        "summary" : "Update insurance details",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/insurance"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Update successful."
          },
          "401" : {
            "description" : "Status 401"
          },
          "404" : {
            "description" : "Status 404"
          },
          "409" : {
            "description" : "Status 409"
          }
        }
      },
      "delete" : {
        "tags" : [ "Insurances" ],
        "summary" : "Delete an insurance",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      },
      "parameters" : [ {
        "name" : "policynumber",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/insurance/{policynumber}/claims" : {
      "get" : {
        "tags" : [ "Insurances" ],
        "summary" : "Get list of claims",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/insuranceClaim"
              }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "policynumber",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/insurance/{policynumber}/claims/{claimid}" : {
      "get" : {
        "tags" : [ "Insurances" ],
        "summary" : "Get details of claim",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/insuranceClaim"
            }
          },
          "404" : {
            "description" : "Status 404"
          }
        }
      },
      "parameters" : [ {
        "name" : "policynumber",
        "in" : "path",
        "required" : true,
        "type" : "string"
      }, {
        "name" : "claimid",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/insurance/claim" : {
      "post" : {
        "tags" : [ "Insurances" ],
        "summary" : "Make new insurance claim",
        "description" : "Refers to object \"Insurance-claim\", which is a very simplified representation.",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/insuranceClaim"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Claim received (not approved quite yet, though)."
          },
          "400" : {
            "description" : "Status 400"
          },
          "404" : {
            "description" : "Status 404"
          }
        }
      }
    },
    "/insurance/car/{licensenumber}" : {
      "get" : {
        "tags" : [ "Insurances" ],
        "summary" : "Get info about a car's insurance",
        "description" : "Check if a car is insured: /insurance/car/AB12345",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/insurance"
            }
          },
          "404" : {
            "description" : "No insurance found."
          }
        }
      },
      "post" : {
        "tags" : [ "Insurances" ],
        "summary" : "Get insurance offer",
        "description" : "Needs a lot of input. https://www.dnb.no/privat/forsikring/bilforsikring.html",
        "consumes" : [ ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/insurance"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Offer provided.",
            "schema" : {
              "$ref" : "#/definitions/insurance"
            }
          },
          "400" : {
            "description" : "Status 400"
          },
          "409" : {
            "description" : "Recently sent an offer."
          }
        }
      },
      "parameters" : [ {
        "name" : "licensenumber",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "AB12345"
      } ]
    },
    "/insurance/car/offer/{licensenumber}" : {
      "post" : {
        "tags" : [ "Insurances" ],
        "summary" : "Get insurance offer",
        "description" : "Needs a lot of input. https://www.dnb.no/privat/forsikring/bilforsikring.html\n\nFor now: Assume the attributes of Car object are sufficient.",
        "consumes" : [ ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/car"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/insuranceOffer"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "licensenumber",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "AB12345"
      } ]
    },
    "/insurance/car/towingservice/{latitude}/{longditude}" : {
      "get" : {
        "tags" : [ "Insurances" ],
        "summary" : "Get nearest car towing service",
        "description" : "For now: Return a list of Locations. Later: Array of object representing car towing services.",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/location"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "latitude",
        "in" : "path",
        "required" : true,
        "type" : "string"
      }, {
        "name" : "longditude",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/insurance/car/service/{latitude}/{longditude}" : {
      "get" : {
        "tags" : [ "Insurances" ],
        "summary" : "Get nearest car service",
        "description" : "Based on the specified location: List the nearest car service Locations, sorted by distance. Ideally: Also provide references to details about each service Location (contact info, opening hours, etc).",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/location"
            }
          },
          "404" : {
            "description" : "Status 404"
          }
        }
      },
      "parameters" : [ {
        "name" : "latitude",
        "in" : "path",
        "required" : true,
        "type" : "string"
      }, {
        "name" : "longditude",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/insurance/weatheralert/{latitude}/{longditude}" : {
      "get" : {
        "tags" : [ "Insurances" ],
        "summary" : "Check if there is a weather alert",
        "parameters" : [ {
          "name" : "radius",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "description" : "Radius in km.",
          "x-example" : "50"
        } ],
        "responses" : {
          "200" : {
            "description" : "Yes there is, and here are the details.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "404" : {
            "description" : "No weather alert."
          }
        }
      },
      "parameters" : [ {
        "name" : "latitude",
        "in" : "path",
        "required" : true,
        "type" : "string"
      }, {
        "name" : "longditude",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/location/atm/{latitude}/{longditude}/" : {
      "get" : {
        "tags" : [ "Location" ],
        "summary" : "Nearest ATM",
        "description" : "If no details (as for now): Assume ATM is open 24h.",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "List of minibank locations",
            "schema" : {
              "$ref" : "#/definitions/ATM"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "latitude",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Current latitude. Example: 37.4238253802915"
      }, {
        "name" : "longditude",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Current longditude. Example: -122.0842499"
      } ]
    },
    "/location/branch/findbyaddress" : {
      "get" : {
        "tags" : [ "Location" ],
        "summary" : "Find nearest branch by address",
        "description" : "For now: Assume geocoding functionality similar to Google Maps: https://developers.google.com/maps/documentation/geocoding/intro",
        "parameters" : [ {
          "name" : "address",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "description" : "For now: Assume geocoding functionality similar to Google Maps: https://developers.google.com/maps/documentation/geocoding/intro"
        } ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/branch"
            }
          }
        }
      }
    },
    "/location/branch/{latitude}/{longditude}/" : {
      "get" : {
        "tags" : [ "Location" ],
        "summary" : "Nearest branch office",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/branch"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "latitude",
        "in" : "path",
        "required" : true,
        "type" : "string"
      }, {
        "name" : "longditude",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/location/branch/{branchid}/openinghours" : {
      "get" : {
        "tags" : [ "Location" ],
        "summary" : "Opening hours of a branch",
        "description" : "Response may not be ideal - input is welcome. Google Places' ```opening_hours```may be useful: https://developers.google.com/places/web-service/details",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/openingTimes"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Location" ],
        "summary" : "Update branch opening hours",
        "description" : "Request data TBD",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/openingTimes"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      },
      "parameters" : [ {
        "name" : "branchid",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Id of a branch"
      } ]
    },
    "/location/branch/{branchid}/details" : {
      "get" : {
        "tags" : [ "Location" ],
        "summary" : "Branch details",
        "description" : "Returns an array of strings, which may include all kinds of iformation (text, URLs, media, etc).",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/branch"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Location" ],
        "summary" : "Update branch details",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/branch"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      },
      "parameters" : [ {
        "name" : "branchid",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Id of branch"
      } ]
    },
    "/locations/branch/findbyaddress" : {
      "get" : {
        "tags" : [ "Location" ],
        "summary" : "Find nearest branch by address",
        "description" : "Basic geocoding functionality similar to Google Maps: https://developers.google.com/maps/documentation/geocoding/intro",
        "parameters" : [ {
          "name" : "address",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "description" : "For now: Assume geocoding functionality similar to Google Maps: https://developers.google.com/maps/documentation/geocoding/intro"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "$ref" : "#/definitions/branch"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      }
    },
    "/locations/branch/{latitude}/{longditude}/" : {
      "get" : {
        "tags" : [ "Location" ],
        "summary" : "Find nearest branch by coordinates",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "$ref" : "#/definitions/branch"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "latitude",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "x-example" : "59.9075823"
      }, {
        "name" : "longditude",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "x-example" : "10.760133399999972"
      } ]
    },
    "/locations/branch/{branchid}/details" : {
      "get" : {
        "tags" : [ "Location" ],
        "summary" : "Get branch details",
        "description" : "Contact information, opening hours, etc.",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "$ref" : "#/definitions/branch"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "branchid",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Id of branch",
        "x-example" : "12345"
      } ]
    },
    "/locations/branch/{branchid}/openingtimes" : {
      "get" : {
        "tags" : [ "Location" ],
        "summary" : "Get a branch's opening times",
        "description" : "Opening times is also included in Branch.",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "$ref" : "#/definitions/openingTimes"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "branchid",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Id of a branch",
        "x-example" : "12345"
      } ]
    },
    "/locations/atm/{latitude}/{longditude}/" : {
      "get" : {
        "tags" : [ "Location" ],
        "summary" : "Find nearest ATM by coordinates",
        "description" : "If no details (as for now): Assume ATM is open 24h.",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ATM"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "latitude",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Current latitude.",
        "x-example" : "59.9075823"
      }, {
        "name" : "longditude",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Current longditude.",
        "x-example" : "10.760133399999972"
      } ]
    },
    "/locations/branches" : {
      "get" : {
        "tags" : [ "Location" ],
        "summary" : "Get list of all DNB branches",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/branch"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          }
        }
      }
    },
    "/stocks/{ticker}" : {
      "get" : {
        "tags" : [ "Stocks" ],
        "summary" : "Get info about stock with ticker",
        "description" : "Key information, such as: Company name, organization number, contact information, etc.",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "ticker",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/stocks/price/{ticker}/{timestamp}" : {
      "get" : {
        "tags" : [ "Stocks" ],
        "summary" : "Get price of stock",
        "description" : "For now: Returns a number. ",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "type" : "number"
            }
          },
          "404" : {
            "description" : "Status 404"
          }
        }
      },
      "parameters" : [ {
        "name" : "ticker",
        "in" : "path",
        "required" : true,
        "type" : "string"
      }, {
        "name" : "timestamp",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "format" : "date-time"
      } ]
    },
    "/vipps/settlement/{settlementid}/user/{userid}" : {
      "get" : {
        "tags" : [ "Vipps" ],
        "summary" : "Details of user in settlement",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Maybe just a Person, as he/she may not be a customer with us."
          }
        }
      },
      "parameters" : [ {
        "name" : "settlementid",
        "in" : "path",
        "required" : true,
        "type" : "string"
      }, {
        "name" : "userid",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/vipps/settlement/{settlementid}/user" : {
      "post" : {
        "tags" : [ "Vipps" ],
        "summary" : "Add user to settlement",
        "description" : "Should POST a Person, not Customer",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      },
      "parameters" : [ {
        "name" : "settlementid",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/vipps/settlement/{settlementid}/settle" : {
      "get" : {
        "tags" : [ "Vipps" ],
        "summary" : "Settle, pay everyone",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      },
      "parameters" : [ {
        "name" : "settlementid",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/vipps/settlement/{settlementid}/expense" : {
      "get" : {
        "tags" : [ "Vipps" ],
        "summary" : "Details of expense",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      },
      "post" : {
        "tags" : [ "Vipps" ],
        "summary" : "New expense",
        "description" : "Date, who, amount, description, etc",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      },
      "delete" : {
        "tags" : [ "Vipps" ],
        "summary" : "Delete expense from settlement",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      },
      "parameters" : [ {
        "name" : "settlementid",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/vipps/settlement/{settlementid}" : {
      "get" : {
        "tags" : [ "Vipps" ],
        "summary" : "Details of a settlement",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Created, status, name, owners/admins, list of expenses",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Vipps" ],
        "summary" : "Delete settlement",
        "description" : "(Not possible in Vipps today)",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      },
      "parameters" : [ {
        "name" : "settlementid",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/vipps/settlement/create" : {
      "post" : {
        "tags" : [ "Vipps" ],
        "summary" : "Create a new (empty) settlement",
        "description" : "date, name, participants, currency(?)",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      }
    },
    "/vipps/payments" : {
      "post" : {
        "tags" : [ "Vipps" ],
        "summary" : "Make new Vipps payment",
        "description" : "From 8.3.2: https://www.vipps.no/portalfront/vipps/nedlast/eCommerce_API_v1.2.pdf",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/vippsPaymentRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "",
            "schema" : {
              "$ref" : "#/definitions/vippsPaymentResponse"
            }
          }
        }
      }
    },
    "/vipps/merchants/{latitude}/{longditude}" : {
      "get" : {
        "tags" : [ "Vipps" ],
        "summary" : "Nearby Vipps merchants",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      },
      "parameters" : [ {
        "name" : "latitude",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Current latitude. Example: 37.4238253802915"
      }, {
        "name" : "longditude",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Current longditude. Example: -122.0842499"
      } ]
    },
    "/vipps/invoice/{customerId}" : {
      "get" : {
        "tags" : [ "Vipps" ],
        "summary" : "Get Vipps invoice details",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          },
          "404" : {
            "description" : "Status 404"
          }
        }
      },
      "post" : {
        "tags" : [ "Vipps" ],
        "summary" : "Create new Vipps invoice customer",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          },
          "400" : {
            "description" : "Status 400"
          }
        }
      },
      "parameters" : [ {
        "name" : "customerId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Organization number, 9 digits. Example: 123456789"
      } ]
    },
    "/vipps/customer" : {
      "post" : {
        "tags" : [ "Vipps" ],
        "summary" : "Create new Vipps customer",
        "description" : "Phone number, personal id number, name, card number, account number",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      }
    },
    "/vipps/payments/{orderId}/serialNumber/{merchantSerialNumber}/details" : {
      "get" : {
        "tags" : [ "Vipps" ],
        "summary" : "Get payment details",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/vippsTransaction"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "orderId",
        "in" : "path",
        "required" : true,
        "type" : "string"
      }, {
        "name" : "merchantSerialNumber",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/reports/turnovers/{year}/{month}/{customerId}" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Turnovers report.",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      },
      "parameters" : [ {
        "name" : "year",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Year, 4 digits. Example: 2017"
      }, {
        "name" : "month",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Month, 2 digits (January is 01). Example: 01"
      }, {
        "name" : "customerId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Organization number, 9 digits. Example: 123456789"
      } ]
    },
    "/reports/transactions/{year}/{month}/{customerId}" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Transaction report.",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "{\n    \"transactions\": [\n        {\n            \"account_balance\": 12325,\n            \"amount\": -20,\n            \"created\": \"2016-08-05T08:00:00Z\",\n            \"currency\": \"NOK\",\n            \"description\": \"DNB Børsbaren\",\n            \"id\": \"<id>\",\n            \"merchant_id\": \"<id>\",\n            \"notes\": \"Dobbel espresso\",\n            \"settled\": \"2016-08-05T08:00:00Z \",\n            \"category\": \"restaurant\"\n        },\n        {\n            \"account_balance\": 12305,\n            \"amount\": -20,\n            \"created\": \"2016-08-05T08:05:00Z\",\n            \"currency\": \"NOK\",\n            \"description\": \"DNB Børsbaren\",\n            \"id\": \"<id>\",\n            \"merchant_id\": \"<id>\",\n            \"notes\": \"Dobbel espresso\",\n            \"settled\": \"2016-08-05T08:05:00Z \",\n            \"category\": \"restaurant\"\n        },\n    ]\n}",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "year",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Year, 4 digits. Example: 2017"
      }, {
        "name" : "month",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Month, 2 digits (January is 01). Example: 01"
      }, {
        "name" : "customerId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "social security number (personnummer), 9 digits. Example: 123456789"
      } ]
    },
    "/reports/system/{customerId}" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "System report.",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      },
      "parameters" : [ {
        "name" : "customerId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Organization number, 9 digits. Example: 123456789"
      } ]
    },
    "/reports/solidity/{customerId}" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Solidity report.",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      },
      "parameters" : [ {
        "name" : "customerId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Organization number, 9 digits. Example: 123456789"
      } ]
    },
    "/reports/roles/{year}/{customerId}" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Roles report.",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      },
      "parameters" : [ {
        "name" : "year",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Year, 4 digits. Example: 2017"
      }, {
        "name" : "customerId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Organization number, 9 digits. Example: 123456789"
      } ]
    },
    "/reports/revenues/{year}/{month}/{customerId}" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Revenues report.",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      },
      "parameters" : [ {
        "name" : "year",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Year, 4 digits. Example: 2017"
      }, {
        "name" : "month",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Month, 2 digits (January is 01). Example: 01"
      }, {
        "name" : "customerId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Organization number, 9 digits. Example: 123456789"
      } ]
    },
    "/reports/profitability/{year}/{month}/{customerId}" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Profitability report.",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      },
      "parameters" : [ {
        "name" : "year",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Year, 4 digits. Example: 2017"
      }, {
        "name" : "month",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Month, 2 digits (January is 01). Example: 01"
      }, {
        "name" : "customerId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Organization number, 9 digits. Example: 123456789"
      } ]
    },
    "/reports/products/{customerId}" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Products report.",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      },
      "parameters" : [ {
        "name" : "customerId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Organization number, 9 digits. Example: 123456789"
      } ]
    },
    "/reports/organization/{customerId}" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Organization report.",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/report"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "customerId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Organization number, 9 digits. Example: 123456789"
      } ]
    },
    "/reports/notifications/{year}/{month}/{customerId}" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Notifications report.",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/report"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "year",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Year, 4 digits. Example: 2017"
      }, {
        "name" : "month",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Month, 2 digits (January is 01). Example: 01"
      }, {
        "name" : "customerId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Organization number, 9 digits. Example: 123456789"
      } ]
    },
    "/reports/loanpayments/{year}/{month}/{customerId}" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Loan payments report.",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/report"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "year",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Year, 4 digits. Example: 2017"
      }, {
        "name" : "month",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Month, 2 digits (January is 01). Example: 01"
      }, {
        "name" : "customerId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Organization number, 9 digits. Example: 123456789"
      } ]
    },
    "/reports/liquiditystatus/{year}/{month}/{customerId}" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Liquidity status for year, month and company.",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/report"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "year",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Year, 4 digits. Example: 2017"
      }, {
        "name" : "month",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Month, 2 digits (January is 01). Example: 01"
      }, {
        "name" : "customerId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Organization number, 9 digits. Example: 123456789"
      } ]
    },
    "/reports/liquidityprognosis/{year}/{month}/{customerId}" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Liquidity prognosis for year, month and copmpany.",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/report"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Reports" ],
        "summary" : "Delete prognosis.",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      },
      "parameters" : [ {
        "name" : "year",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Year, 4 digits. Example: 2017"
      }, {
        "name" : "month",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Month, 2 digits (January is 01). Example: 01"
      }, {
        "name" : "customerId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Organization number, 9 digits. Example: 123456789"
      } ]
    },
    "/reports/liquidity/{year}{month}/{customerId}" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Liquidity for year, month and company.",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/report"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "year",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Year, 4 digits. Example: 2017"
      }, {
        "name" : "month",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Month, 2 digits (January is 01). Example: 01"
      }, {
        "name" : "customerId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Organization number, 9 digits. Example: 123456789"
      } ]
    },
    "/reports/invoices/{customerId}" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Invoices report.",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/report"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "customerId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Organization number, 9 digits. Example: 123456789"
      } ]
    },
    "/reports/expenses/{year}/{month}/{customerId}" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Expenses report.",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/report"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "year",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Year, 4 digits. Example: 2017"
      }, {
        "name" : "month",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Month, 2 digits (January is 01). Example: 01"
      }, {
        "name" : "customerId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Organization number, 9 digits. Example: 123456789"
      } ]
    },
    "/reports/chats/{year}/{month}/{customerId}" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Chats report.",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/report"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "year",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Year, 4 digits. Example: 2017"
      }, {
        "name" : "month",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Month, 2 digits (January is 01). Example: 01"
      }, {
        "name" : "customerId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Organization number, 9 digits. Example: 123456789"
      } ]
    },
    "/reports/calendars/{year}/{month}/{customerId}" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Calendar report.",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/report"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "year",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Year, 4 digits. Example: 2017"
      }, {
        "name" : "month",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Month, 2 digits (January is 01). Example: 01"
      }, {
        "name" : "customerId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Organization number, 9 digits. Example: 123456789"
      } ]
    },
    "/reports/benchmarks/{year}/{month}/{customerId}/compareto/{customerId_compare}" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Benchmark report.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "?type=",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "description" : "What to compare: revenue (default=, profitability, liquidity",
          "x-example" : "revenue"
        } ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/report"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "year",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Year, 4 digits. Example: 2017"
      }, {
        "name" : "month",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Month, 2 digits (January is 01). Example: 01"
      }, {
        "name" : "customerId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Organization number, 9 digits. Example: 123456789"
      }, {
        "name" : "customerId_compare",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Organization number of company to to compare with, 9 digits. Example: 123456789"
      } ]
    },
    "/reports/behaviour/{customerId}" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Behaviour report.",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/report"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Reports" ],
        "summary" : "Delete advices.",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      },
      "parameters" : [ {
        "name" : "customerId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Organization number, 9 digits. Example: 123456789"
      } ]
    },
    "/reports/annual/{year}/{customerId}" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Annual report for year and company,",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Report found.",
            "schema" : {
              "$ref" : "#/definitions/annualReport"
            }
          },
          "404" : {
            "description" : "Annual report not found."
          }
        }
      },
      "parameters" : [ {
        "name" : "year",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Year, 4 digits. Example: 2017"
      }, {
        "name" : "customerId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Organization number, 9 digits. Example: 123456789"
      } ]
    },
    "/reports/advices/{year}/{month}/{customerId}" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Advices report.",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/advice"
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Reports" ],
        "summary" : "Delete advices",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      },
      "parameters" : [ {
        "name" : "year",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Year, 4 digits. Example: 2017"
      }, {
        "name" : "month",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Month, 2 digits (January is 01). Example: 01"
      }, {
        "name" : "customerId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Organization number, 9 digits. Example: 123456789"
      } ]
    },
    "/reports/accounts/{customerId}" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Accounts report.",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Different use than /accounts?",
            "schema" : {
              "$ref" : "#/definitions/report"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "customerId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Organization number, 9 digits. Example: 123456789"
      } ]
    },
    "/saf-t/{customerId}/{type}" : {
      "get" : {
        "tags" : [ "SAF-T" ],
        "summary" : "Get SAF-T file for a company of type",
        "description" : "",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/SAF-T-file"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "SAF-T" ],
        "summary" : "Send new SAF-T file of type",
        "description" : "",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SAF-T-file"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      },
      "parameters" : [ {
        "name" : "customerId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Organization number, 9 digits. Example: 123456789"
      }, {
        "name" : "type",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Type of SAF-T file"
      } ]
    },
    "/saf-t/{customerId}" : {
      "get" : {
        "tags" : [ "SAF-T" ],
        "summary" : "Get SAF-T file for a company",
        "description" : "",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/SAF-T-file"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "SAF-T" ],
        "summary" : "Send new SAF-T file",
        "description" : "",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SAF-T-file"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      },
      "parameters" : [ {
        "name" : "customerId",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Organization number, 9 digits. Example: 123456789"
      } ]
    },
    "/api/key" : {
      "get" : {
        "tags" : [ "API" ],
        "summary" : "Get new API key",
        "description" : "Simplified example. Requires a method of identification, the minimum being Facebook or Google OAuth. ",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "type" : "string"
            },
            "examples" : {
              "application/json" : "Ok, you're in."
            }
          },
          "400" : {
            "description" : "Status 400"
          },
          "401" : {
            "description" : "Status 401"
          },
          "429" : {
            "description" : "Status 429"
          }
        }
      }
    },
    "/api/key/{apikey}" : {
      "get" : {
        "tags" : [ "API" ],
        "summary" : "Get details of API key",
        "description" : "For now: Also returns some housekeeping details, as an example. ",
        "parameters" : [ {
          "name" : "apikey",
          "in" : "header",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "type" : "object",
              "properties" : {
                "balance" : {
                  "type" : "string",
                  "description" : "Some details of current balance, if relevant to the subscription plan"
                },
                "invoice" : {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "type" : "string"
                    },
                    "date" : {
                      "type" : "string",
                      "format" : "date"
                    },
                    "amount" : {
                      "type" : "integer"
                    },
                    "paid" : {
                      "type" : "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "API" ],
        "summary" : "Delete API key",
        "parameters" : [ {
          "name" : "apikey",
          "in" : "header",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Status 204"
          },
          "404" : {
            "description" : "Status 404"
          }
        }
      },
      "parameters" : [ {
        "name" : "apikey",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Example: fa01s-21res-qq21p-mq1p6"
      } ]
    },
    "/api/ratelimit" : {
      "get" : {
        "tags" : [ "API" ],
        "summary" : "Rate limit for current user",
        "description" : "How am I doing? Am I near my limit? ",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "404" : {
            "description" : "Status 404"
          }
        }
      }
    },
    "/api/whoami" : {
      "get" : {
        "tags" : [ "API" ],
        "summary" : "Who am I?",
        "description" : "All details of current API user account:\n* Contact details\n* API key details\n* Payment/plan/subscription\n* Throttling info\n* etc",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Details of current API key holder.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "404" : {
            "description" : "Well, that's a surprise"
          },
          "418" : {
            "description" : "I'm a little teapot"
          }
        }
      }
    },
    "/api/ping" : {
      "get" : {
        "tags" : [ "API" ],
        "summary" : "API ping",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Hello!"
          },
          "404" : {
            "description" : "Server up, but not for you."
          },
          "429" : {
            "description" : "Yes, yes, yes!"
          }
        }
      }
    },
    "/environment/travel/car/details/{licensenumber}" : {
      "get" : {
        "tags" : [ "Environment" ],
        "summary" : "Get details about car",
        "description" : "Get data about a car, by license number.\n\nNorwegian vehicles: https://www.vegvesen.no/Kjoretoy/Kjop+og+salg/Kj%C3%B8ret%C3%B8yopplysninger",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/carDetails"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Environment" ],
        "summary" : "Delete details about a car",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          },
          "401" : {
            "description" : "Status 401"
          },
          "404" : {
            "description" : "Status 404"
          }
        }
      },
      "parameters" : [ {
        "name" : "licensenumber",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/environment/travel/car/footprint/{origin}/{destination}" : {
      "get" : {
        "tags" : [ "Environment" ],
        "summary" : "Get eco footprint for car travel",
        "description" : "Returns array of String for now.\nFuture: Support routes, not just origin and desitination.\n\nExample call at Brighter Planet:\n```\nhttp://impact.brighterplanet.com/automobile_trips?automobile_fuel=Diesel&date=2017-09-20&destination=Kirkenes&fuel_efficiency=0.5&origin=Oslo&speed=80&timeframe=2017-01-01%2F2018-01-01\n````",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/ecoProfileTravel"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "origin",
        "in" : "path",
        "required" : true,
        "type" : "string"
      }, {
        "name" : "destination",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/environment/travel/flight/footprint/{airportOrigin}/{airportDestination}" : {
      "get" : {
        "tags" : [ "Environment" ],
        "summary" : "Get eco footprint for flight",
        "description" : "Returns array of String for now.",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/ecoProfileTravel"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "airportOrigin",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "x-example" : "OSL"
      }, {
        "name" : "airportDestination",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "x-example" : "HND"
      } ]
    },
    "/environment/building/ecoProfileByLocation/{latitude}/{longditude}" : {
      "get" : {
        "tags" : [ "Environment" ],
        "summary" : "Get a building's eco profile by address",
        "description" : "Retrieves data from various sources TBD",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/ecoProfileBuilding"
            }
          },
          "404" : {
            "description" : "Status 404"
          }
        }
      },
      "post" : {
        "tags" : [ "Environment" ],
        "summary" : "Create a building's eco profile",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ecoProfileBuilding"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          },
          "400" : {
            "description" : "Status 400"
          },
          "401" : {
            "description" : "Status 401"
          }
        }
      },
      "delete" : {
        "tags" : [ "Environment" ],
        "summary" : "Delete a building's eco profile",
        "parameters" : [ ],
        "responses" : {
          "204" : {
            "description" : "Status 204"
          },
          "400" : {
            "description" : "Status 400"
          },
          "404" : {
            "description" : "Status 404"
          }
        }
      },
      "parameters" : [ {
        "name" : "latitude",
        "in" : "path",
        "required" : true,
        "type" : "string"
      }, {
        "name" : "longditude",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/environment/building/ecoProfileByAddress" : {
      "get" : {
        "tags" : [ "Environment" ],
        "summary" : "Get a building's eco profile by address",
        "description" : "Retrieves data from various sources TBD",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/ecoProfileBuilding"
            }
          },
          "400" : {
            "description" : "Status 400"
          },
          "404" : {
            "description" : "Status 404"
          }
        }
      },
      "post" : {
        "tags" : [ "Environment" ],
        "summary" : "Create a building's eco profile",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ecoProfileBuilding"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          },
          "400" : {
            "description" : "Status 400"
          },
          "401" : {
            "description" : "Status 401"
          }
        }
      },
      "delete" : {
        "tags" : [ "Environment" ],
        "summary" : "Delete building's eco profile",
        "parameters" : [ ],
        "responses" : {
          "204" : {
            "description" : "Status 204"
          },
          "401" : {
            "description" : "Status 401"
          },
          "404" : {
            "description" : "Status 404"
          }
        }
      }
    },
    "/environment/person/ecoprofile/{customerId}" : {
      "get" : {
        "tags" : [ "Environment" ],
        "summary" : "Get a person's eco profile",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "$ref" : "#/definitions/ecoProfile"
            }
          },
          "401" : {
            "description" : "Status 401"
          },
          "404" : {
            "description" : "Status 404"
          }
        }
      },
      "post" : {
        "tags" : [ "Environment" ],
        "summary" : "Create a person's eco profile",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ecoProfile"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          },
          "400" : {
            "description" : "Status 400"
          },
          "401" : {
            "description" : "Status 401"
          },
          "500" : {
            "description" : "Status 500"
          }
        }
      },
      "delete" : {
        "tags" : [ "Environment" ],
        "summary" : "Delete a person's eco profile",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          },
          "401" : {
            "description" : "Status 401"
          },
          "404" : {
            "description" : "Status 404"
          }
        }
      },
      "parameters" : [ {
        "name" : "customerId",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    }
  },
  "securityDefinitions" : {
    "OAuth2" : {
      "type" : "oauth2",
      "authorizationUrl" : "https://api.dnb.no/oauth/authorize",
      "tokenUrl" : "https://api.dnb.no/oauth/token",
      "flow" : "accessCode",
      "scopes" : {
        "read" : "Read",
        "write" : "Write"
      }
    },
    "Basic authentication" : {
      "type" : "basic"
    }
  },
  "definitions" : {
    "customer" : {
      "type" : "object",
      "required" : [ "address", "countryTax", "customerId", "customerType" ],
      "properties" : {
        "customerId" : {
          "type" : "string",
          "description" : "SSN or organization number",
          "example" : "12345678901"
        },
        "customerType" : {
          "type" : "string",
          "description" : "```PERSON```, ```COMPANY```",
          "example" : "PERSON"
        },
        "firstName" : {
          "type" : "string",
          "description" : "First name. May be used contact person if type is ```COMPANY```.",
          "example" : "Rune"
        },
        "lastName" : {
          "type" : "string",
          "description" : "Surname. May be used contact person if type is ```COMPANY```.",
          "example" : "Bjerke"
        },
        "companyName" : {
          "type" : "string",
          "description" : "Company name, if type is ```COMPANY```.",
          "example" : "DNB"
        },
        "address" : {
          "$ref" : "#/definitions/address"
        },
        "email" : {
          "type" : "string",
          "description" : "Email address.",
          "example" : "example@example.com"
        },
        "phone" : {
          "type" : "string",
          "description" : "Including \"+\" and international prefix. Whitespace is stripped.",
          "example" : "+4791504800"
        },
        "countryOfBirth" : {
          "type" : "string",
          "description" : "ISO 3166-1 alpha-2: https://www.iso.org/standard/63546.html",
          "example" : "NO"
        },
        "countryCitizenships" : {
          "type" : "array",
          "description" : "ISO 3166-1 alpha-2: https://www.iso.org/standard/63546.html",
          "items" : {
            "type" : "string",
            "example" : "NO"
          }
        },
        "countryTax" : {
          "type" : "array",
          "description" : "ISO 3166-1 alpha-2: https://www.iso.org/standard/63546.html",
          "items" : {
            "type" : "string",
            "example" : "NO"
          }
        },
        "customerEngagement" : {
          "type" : "array",
          "description" : "One or more engagements",
          "items" : {
            "$ref" : "#/definitions/customerEngagement"
          }
        }
      },
      "description" : "One common ```customer```data object for all kinds of customers: Private customers, business customers, and others.\n\nPlease note:\n* Some updates may be required.\n* Should be aligned with Shared Services Layer: https://shasl.restlet.io/#type_customer\n* Should be aligned with CIM, while still hiding internal complexity and making it easy to understand and use."
    },
    "customerEngagement" : {
      "type" : "object",
      "required" : [ "engagementId" ],
      "properties" : {
        "engagementId" : {
          "type" : "string",
          "example" : "12345"
        },
        "engagementType" : {
          "type" : "string",
          "description" : "Types of engagements: To be determined. Needs to be aligned with DNB CIM, without exposing internal complexity.",
          "example" : "DEPOSIT"
        },
        "accountNumber" : {
          "type" : "string",
          "example" : "12345678901"
        },
        "friendlyName" : {
          "type" : "string",
          "example" : "SAGA MasterCard"
        },
        "corporate" : {
          "type" : "boolean",
          "example" : true
        }
      },
      "description" : "Used with ```customer```. \n\nWork in progress. See https://shasl.restlet.io/#type_engagement"
    },
    "customerProfile" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "customerid" : {
          "type" : "string"
        },
        "Notes (placeholder)" : {
          "type" : "string",
          "description" : "Needs lots more."
        }
      }
    },
    "customerScore" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Id of this score"
        },
        "customerid" : {
          "type" : "string",
          "description" : "Customer id"
        },
        "score" : {
          "type" : "integer",
          "description" : "The score"
        },
        "score_details" : {
          "type" : "string",
          "description" : "Optional details"
        }
      }
    },
    "account" : {
      "type" : "object",
      "properties" : {
        "accountNumber" : {
          "type" : "string",
          "description" : "11 digits. Bank, etc can be determined from this: https://no.wikipedia.org/wiki/Kontonummer",
          "example" : "12345678901"
        },
        "type" : {
          "type" : "string",
          "description" : "Any type of account.",
          "example" : "DEPOSIT"
        },
        "accountName" : {
          "type" : "string",
          "description" : "Friendly name for the account:",
          "example" : "Standard account"
        },
        "balanceAvailable" : {
          "type" : "number",
          "example" : 100.01
        },
        "accountDetails" : {
          "$ref" : "#/definitions/accountDetails"
        }
      },
      "description" : "Same ```account``` data object for all types of account. The ```type``` property determines the type. \n\nAn ```account``` may have ```accountDetails```, which may again have ```accountBalance``` and  ```accountInterestDetails```.\n\nA Norwegian ```account```has three groups: xxxx yy zzzzc.\n* xxxx: Bank register number, identifying bank and branch. \n* yy: Account group. \n* zzzz: Customer account number.  \n* c: Control digit, modulo 11 with weight number 5432765432."
    },
    "accountDetails" : {
      "type" : "object",
      "properties" : {
        "IBAN" : {
          "type" : "string",
          "description" : "ISO 13616:2007: https://www.iso.org/standard/41031.html No whitespace",
          "example" : "NO9386011117947"
        },
        "BIC" : {
          "type" : "string",
          "description" : "ISO 9362: https://en.wikipedia.org/wiki/ISO_9362",
          "example" : "DNBANOKKXXX"
        },
        "currency" : {
          "type" : "string",
          "description" : "Currency: ISO 4217: alpha 3-letter upcase. https://www.iso.org/iso-4217-currency-codes.html",
          "example" : "NOK"
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "ISO 8601: www.iso.org/iso/home/standards/iso8601.htm",
          "example" : "2018-12-31T23:59:59+01"
        },
        "updated" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "ISO 8601: www.iso.org/iso/home/standards/iso8601.htm",
          "example" : "2018-12-31T23:59:59+01"
        },
        "accountInterestDetails" : {
          "$ref" : "#/definitions/accountInterestDetails"
        }
      },
      "description" : "Details for an ```account```, with optional reference to ```accountDetails```.\n\nIBAN help: http://www.xe.com/ibancalculator/sample/?ibancountry=norway"
    },
    "accountInterestDetails" : {
      "type" : "object",
      "properties" : {
        "interestRate" : {
          "type" : "number",
          "example" : 2.01
        },
        "earnedInterestToDate" : {
          "type" : "number",
          "example" : 100.01
        },
        "accruedInterestAndFeesToDate" : {
          "type" : "number",
          "example" : 1.01
        },
        "feesToDate" : {
          "type" : "number",
          "example" : 5.01
        },
        "accruedInterestFromLastYear" : {
          "type" : "number",
          "example" : 500.01
        }
      },
      "description" : "Details about an the interest for an ```account```."
    },
    "accountStatement" : {
      "type" : "object",
      "required" : [ "accountNumber", "month", "year" ],
      "properties" : {
        "accountNumber" : {
          "type" : "string",
          "example" : "12345678901"
        },
        "year" : {
          "type" : "string",
          "description" : "YYYY: ISO 8601: www.iso.org/iso/home/standards/iso8601.htm",
          "example" : "1990"
        },
        "month" : {
          "type" : "string",
          "description" : "MM: ISO 8601: www.iso.org/iso/home/standards/iso8601.htm",
          "example" : "01"
        },
        "transactions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/transaction"
          }
        }
      },
      "description" : "Monthly ```account``` statement. "
    },
    "accountBalance" : {
      "type" : "object",
      "required" : [ "accountNumber", "amountAvailable", "amountBooked" ],
      "properties" : {
        "accountNumber" : {
          "type" : "string",
          "description" : "11 digits",
          "example" : "12345678901"
        },
        "amountAvailable" : {
          "type" : "number",
          "description" : "Amount available",
          "example" : 100.01
        },
        "amountBooked" : {
          "type" : "number",
          "description" : "Booked amount available",
          "example" : 100.01
        },
        "timestamp" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "ISO 8601: www.iso.org/iso/home/standards/iso8601.htm",
          "example" : "2018-12-31T23:59:59+01"
        }
      },
      "description" : "Balances for an ```account```. See also: ```cardBalance```."
    },
    "card" : {
      "type" : "object",
      "properties" : {
        "cardId" : {
          "type" : "string",
          "example" : "12345"
        },
        "maskedCardNumber" : {
          "type" : "string",
          "description" : "16 characters: Twelve \"X\", and the last four digits ofr the card number. 4x4 nubers with whitespace.",
          "example" : "XXXX XXXX XXXX 1234"
        },
        "cardType" : {
          "type" : "string",
          "description" : "Visa, MasterCard, American Express, etc",
          "example" : "VISA"
        },
        "cardGroup" : {
          "type" : "string",
          "description" : "Debit or credit.",
          "example" : "DEBIT"
        },
        "accountNumber" : {
          "type" : "string",
          "description" : "Both for debit and credit cards",
          "example" : "012345678901"
        },
        "cardStatus" : {
          "type" : "string",
          "description" : "Normal, active, blocked",
          "example" : "NORMAL"
        },
        "blockCode" : {
          "type" : "string",
          "description" : "If blocked: Code for the blocking reason.",
          "example" : "12345"
        },
        "expiryDate" : {
          "type" : "string",
          "format" : "date",
          "description" : "YYYY-MM. ISO 8601: https://www.iso.org/iso-8601-date-and-time-format.html",
          "example" : "2018-12"
        },
        "debitBalance" : {
          "$ref" : "#/definitions/accountBalance"
        },
        "creditBalance" : {
          "$ref" : "#/definitions/cardBalance"
        }
      },
      "description" : "Both debit and credit cards."
    },
    "cardBalance" : {
      "type" : "object",
      "required" : [ "amountAvailable", "currency" ],
      "properties" : {
        "currency" : {
          "type" : "string",
          "description" : "ISO 4217: alpha 3-letter upcase: https://www.iso.org/iso-4217-currency-codes.html",
          "example" : "NOK"
        },
        "creditLimit" : {
          "type" : "string",
          "example" : "100000.00"
        },
        "amountAvailable" : {
          "type" : "number",
          "description" : "Debit: The amount in the ```account```.Credit: The limit minus the registered payments.",
          "example" : 90000.01
        },
        "amountBook" : {
          "type" : "number",
          "example" : 90000.01
        },
        "timestamp" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "ISO 8601: www.iso.org/iso/home/standards/iso8601.htm",
          "example" : "2018-12-31T23:59:59+01:00"
        }
      },
      "description" : "Used by ```card```. See also: ```accountBalance```."
    },
    "cardInvoice" : {
      "type" : "object",
      "properties" : {
        "card" : {
          "$ref" : "#/definitions/card"
        },
        "year" : {
          "type" : "string",
          "description" : "YYYY",
          "example" : "2018"
        },
        "month" : {
          "type" : "string",
          "description" : "MM, where January is 01",
          "example" : "01"
        },
        "amount" : {
          "type" : "string",
          "example" : "100.00"
        },
        "dueDate" : {
          "type" : "string",
          "format" : "date",
          "description" : "YYYY-MM-DD. ISO 8601: www.iso.org/iso/home/standards/iso8601.htm",
          "example" : "2018-12-31"
        },
        "accountNumber" : {
          "type" : "string",
          "description" : "Account to pay to. 11 digits.",
          "example" : "012345678901"
        },
        "KID" : {
          "type" : "string",
          "description" : "2-25 digits",
          "example" : "42"
        },
        "transactions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/transaction"
          }
        }
      }
    },
    "payment" : {
      "type" : "object",
      "required" : [ "amount", "creditAccount", "debitAccount", "paymentId", "status", "type" ],
      "properties" : {
        "paymentId" : {
          "type" : "string",
          "example" : "123456789"
        },
        "debitAccount" : {
          "type" : "string",
          "example" : "12345678901"
        },
        "creditAccount" : {
          "type" : "string",
          "example" : "12345678901"
        },
        "amount" : {
          "type" : "number",
          "example" : 1500.01
        },
        "type" : {
          "type" : "string",
          "description" : "TBD",
          "example" : "TBD1"
        },
        "date" : {
          "type" : "string",
          "format" : "date",
          "description" : "YYYY-MM-DD: Date: ISO 8601: www.iso.org/iso/home/standards/iso8601.htm",
          "example" : "2018-31-12"
        },
        "status" : {
          "type" : "string",
          "description" : "Statuses TBD",
          "example" : "PAID"
        },
        "paymentDetails" : {
          "$ref" : "#/definitions/paymentDetails"
        }
      },
      "description" : "**Note:** May be completely merged with ```transaction```.\n\nDetails about a payment. Used by:\n* /payments/due/{accountNumber}: Returning a list of payments, with _empty_ PaymentDetails\n* /payments/due/{accountNumber}/details: Returning a list of payments, with PaymentDetails\n\n"
    },
    "paymentDetails" : {
      "type" : "object",
      "properties" : {
        "invoiceReference" : {
          "type" : "string",
          "description" : "Used for eFaktura",
          "example" : "12345678901"
        }
      },
      "description" : "More details about a payment. Some payment types have more data than others."
    },
    "paymentInitiation" : {
      "type" : "object",
      "required" : [ "amount", "creditAccountNumber", "debitAccountNumber", "initiator", "paymentDate", "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "KID, message (and transfer?)",
          "example" : "KID"
        },
        "debitAccountNumber" : {
          "type" : "string",
          "example" : "12345678901"
        },
        "creditAccountNumber" : {
          "type" : "string",
          "example" : "12345678901"
        },
        "amount" : {
          "type" : "string",
          "example" : "1500.00"
        },
        "paymentDate" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "YYYY-MM-DD: Date: ISO 8601: www.iso.org/iso/home/standards/iso8601.htm",
          "example" : "2018-12-31"
        },
        "message" : {
          "type" : "string",
          "description" : "Used for both KID and Message, based on Type.",
          "example" : "35298562958265982749"
        },
        "initiator" : {
          "type" : "string",
          "description" : "Nu phone who dis?",
          "example" : "DNB"
        }
      },
      "description" : "Three types of payments\n* KID: Customer Identification (2-25 digits, including control digit)\n* Message: Text message describing the payment\n\nNot including the \"straksbetaling\" (imediate payment) flag, as this will be the default.\n\nPayment initiator: Part of the contxt object, but kept here too for reference. "
    },
    "SEPA-request" : {
      "type" : "object",
      "required" : [ "account", "id", "remote_account", "remote_bic", "remote_iban" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Unique"
        },
        "account" : {
          "type" : "string",
          "description" : "From-account"
        },
        "remote_iban" : {
          "type" : "string"
        },
        "remote_bic" : {
          "type" : "string"
        },
        "remote_account" : {
          "type" : "string"
        },
        "amount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "currency" : {
          "type" : "string"
        }
      },
      "description" : "```\n{\n  \"account_id\" : \"123456789\",\n  \"external_uid\" : \"99\",\n  \"remote_iban\": \"XXXXX\",\n  \"remote_bic\": \"XXXXX\",\n  \"remote_name\" : \"The Man,\n  \"amount\" : 100000,\n  \"subject\" : \"Enjoy\"\n}\n```"
    },
    "SEPA-response" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "account" : {
          "type" : "string"
        },
        "amount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "remote_iban" : {
          "type" : "string"
        },
        "remote:_bic" : {
          "type" : "string"
        },
        "remote_name" : {
          "type" : "string"
        },
        "state" : {
          "type" : "string"
        },
        "created" : {
          "type" : "string"
        },
        "updated" : {
          "type" : "string"
        },
        "currency" : {
          "type" : "string"
        }
      },
      "description" : "```\n{\n\"id\": \"01\",\n\"account\": \"123456789\",\n\"amount\": 100000\",\n\"currency\": \"NOK\",\n\"remote_iban\": \"XXXXX\",\n\"remote_bic\": \"XXXXX\",\n\"remote_name\": \"The Man\",\n\"state\": \"success\",\n\"created\": \"<timestamp>\",\n\"updated\": \"<timestamp>\",\n}\n\n```"
    },
    "transaction" : {
      "type" : "object",
      "required" : [ "amount", "dateBooking", "transactionId" ],
      "properties" : {
        "transactionId" : {
          "type" : "string",
          "example" : "12345"
        },
        "amount" : {
          "type" : "string",
          "example" : "1500.00"
        },
        "currencyValue" : {
          "type" : "string",
          "description" : "Amount in foreign currency (if relevant)",
          "example" : "90.00"
        },
        "currency" : {
          "type" : "string",
          "description" : "If not the currency of the account/card.",
          "example" : "NOK"
        },
        "dateBooking" : {
          "type" : "string",
          "format" : "date",
          "description" : "YYYY-MM-DD: Date: ISO 8601: www.iso.org/iso/home/standards/iso8601.htm",
          "example" : "2018-13-12"
        },
        "dateValue" : {
          "type" : "string",
          "format" : "date",
          "description" : "YYYY-MM. ISO 8601: www.iso.org/iso/home/standards/iso8601.htm",
          "example" : "2018-12-31"
        },
        "description" : {
          "type" : "string",
          "description" : "Descriptive text for the transaction.",
          "example" : "Lunch at The Restaurant at the End of the Universe"
        },
        "status" : {
          "type" : "string",
          "description" : "Booked, reserved, and, if this is to be merged with ```payment```: Completed (or something similar, to indicate that this has, in fact, been processed and finalized)",
          "example" : "BOOKED"
        },
        "merchantName" : {
          "type" : "string",
          "description" : "Name of merchant. With a merhant register, this could be replaced with a (for now, non-existant) ```merchantId```.",
          "example" : "Coffee Shop ChainName, shop number 10"
        },
        "MCC" : {
          "type" : "string",
          "description" : "MCC: Number and \"combined description\". ISO 18245: https://www.iso.org/standard/33365.html",
          "example" : "3514: Hotels/Motels/Inns/Resorts"
        }
      },
      "description" : "Same ```transaction``` for ll types of transactions: Account transactions, card transactions, etc. Some transaction types have more fields and data than others. A developer should not need to know about different transaction types when retrieving them.\n\nShould have enough data to be useful both for presenting information to an end user, and for data analysis. Mey be extended, possibly to include ```merchantId```with a reference to more details about merchant, as well as ```location```data, etc.\n\nMCC codes: https://github.com/greggles/mcc-codes Example for a hotel:\n```\n{\n    \"mcc\": \"3514\",\n    \"edited_description\": \"Hotels/Motels/Inns/Resorts\",\n    \"combined_description\": \"Hotels/Motels/Inns/Resorts\",\n    \"usda_description\": \"\",\n    \"irs_description\": \"Hotels/Motels/Inns/Resorts\",\n    \"irs_reportable\": \"Yes\",\n    \"id\": 418\n}\n```"
    },
    "loan" : {
      "type" : "object",
      "required" : [ "created", "customerid", "expires", "id", "interest", "remainingamount", "totalamount", "type" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "totalamount" : {
          "type" : "string"
        },
        "remainingamount" : {
          "type" : "string"
        },
        "interest" : {
          "type" : "integer",
          "format" : "int32"
        },
        "customerid" : {
          "type" : "string",
          "description" : "11 digits"
        },
        "created" : {
          "type" : "string",
          "format" : "date-time"
        },
        "expires" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Remaining time can be calculated from this."
        },
        "details (placeholder)" : {
          "type" : "string"
        }
      },
      "description" : "For now: One common loan type for mortgage, car, credit card, etc"
    },
    "currencyRate" : {
      "type" : "object",
      "properties" : {
        "currency" : {
          "type" : "string",
          "description" : "ISO 4217: alpha 3-letter upcase: https://www.iso.org/iso-4217-currency-codes.html",
          "example" : "NOK"
        },
        "currencyRate" : {
          "type" : "string",
          "example" : "123.45"
        }
      },
      "description" : "Used by ```/currencies/list/{base}``` for a response similar to:\n\n```\n{\n    timestamp: 1504548341,\n    base: \"NOK\",\n    rates: {\n        AED: 3.672538,\n        AFN: 66.809999,\n        ALL: 125.716501,\n        AMD: 484.902502,\n        ANG: 1.788575,\n        AOA: 135.295998,\n        ARS: 9.750101,\n        AUD: 1.390866,\n        /* ... */\n    }\n}\n```"
    },
    "insurance" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "description" : "To indicate: Car, house, travel, etc"
        },
        "name" : {
          "type" : "string",
          "description" : "DNB's name for this type of insurance. \"DNB Bolig Best\", etc."
        },
        "amount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "tc" : {
          "type" : "string",
          "description" : "URL (or other reference) to Terms & Conditions for this insurance."
        }
      },
      "description" : "For now: One common Insurance object for all types (house, car, health, etc)."
    },
    "insuranceOffer" : {
      "type" : "object",
      "properties" : {
        "insurance" : {
          "$ref" : "#/definitions/insurance"
        },
        "details" : {
          "type" : "string",
          "description" : "Details for this insurance offer: Date issued, valid until, etc."
        }
      },
      "description" : "For now: A simple object to represent an insurance offer. Refers to Insurance for simplicity."
    },
    "insuranceClaim" : {
      "type" : "object",
      "properties" : {
        "details (placeholder)" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "For now: A simple object to represent an insurance claim. Should include all details necessary to make a claim."
    },
    "car" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "licensenumber" : {
          "type" : "string",
          "description" : "Regnr"
        },
        "milage" : {
          "type" : "number",
          "description" : "In kilometers. No date specified for now."
        },
        "value_today" : {
          "type" : "number",
          "description" : "Estimated value, NOK"
        },
        "value_new" : {
          "type" : "number",
          "description" : "New value, NOK"
        },
        "description" : {
          "type" : "string",
          "description" : "Make, model, etc. This can be fetched from Statens Vegvesen (perhaps no API, just a web page? https://www.vegvesen.no/Kjoretoy/Kjop+og+salg/Kj%C3%B8ret%C3%B8yopplysninger)"
        }
      },
      "description" : "Used for car insurance."
    },
    "house" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "county" : {
          "type" : "number",
          "description" : "Kommunenummer"
        },
        "gnr" : {
          "type" : "string",
          "description" : "Gårdsnummer"
        },
        "bnr" : {
          "type" : "number",
          "description" : "Bruksnummer"
        },
        "value" : {
          "type" : "number",
          "description" : "NOK"
        },
        "description" : {
          "type" : "string",
          "description" : "mMay be empty"
        }
      },
      "description" : "Used for house insurance."
    },
    "vippsPaymentRequest" : {
      "type" : "object",
      "properties" : {
        "merchantInfo" : {
          "type" : "array",
          "items" : {
            "type" : "object",
            "properties" : {
              "merchantSerialNumber" : {
                "type" : "string",
                "description" : "Identifies a merchant sales channel i.e. website, mobile app etc."
              },
              "callBack" : {
                "type" : "string",
                "description" : "ViPPS will use this Call back URL to provide the status of initiated transaction. Length of the string is 255 characters"
              }
            }
          }
        },
        "customerInfo" : {
          "type" : "array",
          "items" : {
            "required" : [ "mobileNumber" ],
            "type" : "object",
            "properties" : {
              "mobileNumber" : {
                "type" : "string",
                "description" : "Mobile number of the user who has to pay for the  transaction from ViPPS.\nAllowed format:\n+47-xxxxxxxx\n+47xxxxxxxx\nxxxxxxxx"
              }
            }
          }
        },
        "transaction" : {
          "type" : "array",
          "items" : {
            "type" : "object",
            "properties" : {
              "orderId" : {
                "type" : "string",
                "description" : "Id which uniquely identifies an Order. Maximum length is 30 alphanumeric characters"
              },
              "refOrderId" : {
                "type" : "string",
                "description" : "Identifies if the payment references to some past orders registered with ViPPS. If defined, transactions for this payment will show up as child transactions of the specified order. Described functionality is not in place and is planned for future implementation"
              },
              "amount" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Amount in øre. 32 Bit Integer (2147483647)"
              },
              "transactionText" : {
                "type" : "string",
                "description" : "Transaction text that can be displayed to end user"
              },
              "timeStamp" : {
                "type" : "string",
                "description" : "Timestamp in ISO\n-\n8601 representing when the \norder has been made by merchant"
              }
            }
          }
        }
      },
      "description" : "Example:\n```\n{\n    \"merchantInfo\": {\n        \"merchantSerialNumber\": \"NSBWSHP12\",\n        \"callBack\": \"https://www.demo.no/api/callback\"\n    },\n    \"customerInfo\": {\n        \"mobileNumber\": \"90090900\"\n    },\n    \"transaction\": {\n        \"orderId\": \"219930212\",\n        \"refOrderId\": \"119930211\",\n        \"amount\": 1200,\n        \"transactionText\": \"Transaction text\",\n        \"timeStamp\":\"2014-06-24T08:34:25-07:00\"\n    }\n}\n```"
    },
    "vippsTransaction" : {
      "type" : "object",
      "properties" : {
        "orderId" : {
          "type" : "string"
        }
      },
      "description" : "From 8.7.5: https://www.vipps.no/portalfront/vipps/nedlast/eCommerce_API_v1.2.pdf\n\nExample:\n```\n{\n    \"orderId\": \"219930212\",\n    \"transactionSummary\": {\n        \"capturedAmount\":\"0\",\n        \"remainingAmoutTocapture\":\"0\",\n        \"refundedAmount\":\"1200\",\n        \"remainingAmountToRefund\":\"0\"\n      },\n     \"transactionLogHistory\": [{\n         \"timeStamp\": \"\",\n        \"operation\": \"\",\n        \"amount\": \"\",\n        \"transactionId\":\"\",\n       \"transactionText\"\n       \"requestId\": \"\"\n}]\n```"
    },
    "vippsPaymentResponse" : {
      "type" : "object",
      "properties" : {
        "orderId" : {
          "type" : "string"
        },
        "merchantSerialNumber" : {
          "type" : "string"
        },
        "transactionInfo" : {
          "type" : "array",
          "items" : {
            "type" : "object",
            "properties" : {
              "amount" : {
                "type" : "string"
              },
              "status" : {
                "type" : "string"
              },
              "transactionId" : {
                "type" : "string"
              },
              "timeStamp" : {
                "type" : "string"
              },
              "message" : {
                "type" : "string"
              }
            }
          }
        }
      },
      "description" : "From 8.3.7: https://www.vipps.no/portalfront/vipps/nedlast/eCommerce_API_v1.2.pdf\n\n```\n{\n    \"orderId\": \"219930212\",\n    \"merchantSerialNumber\": \"NSBWSHP12\",\n    \"transactionInfo\": {\n        \"amount\": 1200,\n        \"status\": \"Initiate\",\n        \"transactionId\": \"1001234566\",\n        \"timeStamp\": \"2014-06-24T08:34:25-07:00\" , \n        \"message\":\"Please use vipps app to process the payment\"\n    }\n}\n```"
    },
    "vippsCustomer" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "phone" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "accountnumber" : {
          "type" : "string"
        },
        "cardnumber" : {
          "type" : "string"
        }
      }
    },
    "report" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "details" : {
          "type" : "string"
        }
      },
      "description" : "Placeholder for various reports."
    },
    "annualReport" : {
      "type" : "object",
      "properties" : {
        "customerId" : {
          "type" : "string"
        },
        "year" : {
          "type" : "string"
        },
        "details" : {
          "type" : "string",
          "description" : "TDB. Around 80 fields."
        }
      },
      "description" : "See SAF-T: https://github.com/Skatteetaten/saf-t"
    },
    "advice" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "details" : {
          "type" : "string",
          "description" : "TBD"
        }
      },
      "description" : "Advice for BM Puls."
    },
    "SAF-T-file" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "fileurl" : {
          "type" : "string",
          "description" : "(Unless all data is included in Object)"
        }
      },
      "description" : "Standard Audit File - Tax\n\nExample file: https://github.com/Skatteetaten/saf-t/blob/master/Example%20Files/ExampleFile%20SAF-T%20Financial_999999999_20161125213512.xml"
    },
    "address" : {
      "type" : "object",
      "required" : [ "postCity", "postCode", "postCountry" ],
      "properties" : {
        "postalAddressLine1" : {
          "type" : "string",
          "description" : "Street name and number",
          "example" : "Dronning Eufemias gate 30"
        },
        "postalAddressLine2" : {
          "type" : "string",
          "example" : "c/o CEO office"
        },
        "postalAddressLine3" : {
          "type" : "string"
        },
        "postCode" : {
          "type" : "string",
          "example" : "0191"
        },
        "postCity" : {
          "type" : "string",
          "example" : "Oslo"
        },
        "postCountry" : {
          "type" : "string",
          "description" : "ISO 3166-1 alpha-2: https://www.iso.org/standard/63546.html",
          "example" : "NO"
        }
      },
      "description" : "Corresponds with address fields used internally in DNB. "
    },
    "location" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Internal id",
          "example" : "12345"
        },
        "friendlyName" : {
          "type" : "string",
          "description" : "Descriptive name",
          "example" : "DNB headquarters"
        },
        "latitude" : {
          "type" : "string",
          "example" : "59.9075823"
        },
        "longditude" : {
          "type" : "string",
          "example" : "10.760133399999972"
        },
        "description" : {
          "type" : "string",
          "description" : "May be used for large areas like airports, train stations, stadiums, etc.",
          "example" : "Lobby"
        }
      },
      "description" : "Data object for physical location based on GPS coordinates. May be used for something that does not have a specific address, or somethjing that needs a more specific than an address provides, such as an ```ATM``` at a train station. A ```location``` may be used in addition to an ```address```.\n"
    },
    "branch" : {
      "type" : "object",
      "properties" : {
        "branchId" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string",
          "example" : "DNB headquarters, lobby"
        },
        "phoneNumber" : {
          "type" : "string",
          "description" : "Including \"+\" and international prefix. Whitespace is stripped.",
          "example" : "+4791504800"
        },
        "email" : {
          "type" : "string",
          "example" : "example@example.com"
        },
        "address" : {
          "$ref" : "#/definitions/address"
        },
        "openingTimes" : {
          "$ref" : "#/definitions/openingTimes"
        },
        "location" : {
          "$ref" : "#/definitions/location"
        }
      }
    },
    "ATM" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "12345"
        },
        "name" : {
          "type" : "string",
          "example" : "DNB headquarters, lobby"
        },
        "address" : {
          "$ref" : "#/definitions/address"
        },
        "location" : {
          "$ref" : "#/definitions/location"
        },
        "openingTimes" : {
          "$ref" : "#/definitions/openingTimes"
        },
        "currencies" : {
          "type" : "array",
          "description" : "Array of ISO 4217: alpha 3-letter upcase. https://www.iso.org/iso-4217-currency-codes.html",
          "items" : {
            "type" : "string",
            "example" : "NOK"
          }
        }
      }
    },
    "openingTimes" : {
      "type" : "array",
      "description" : "Opening times for a ```branch```, ```ATM```, or something else.\n\nIf open 24 hours, use \"00:00\" both for ```openingTime``` and ```closingTime```.",
      "items" : {
        "type" : "object",
        "properties" : {
          "day" : {
            "type" : "integer",
            "description" : "1: Monday, 2: Tuesday, etc"
          },
          "openingTime" : {
            "type" : "string",
            "description" : "HH:MM",
            "example" : "09:00"
          },
          "closingTime" : {
            "type" : "string",
            "description" : "HH:MM",
            "example" : "16:00"
          }
        }
      }
    },
    "error" : {
      "type" : "object",
      "properties" : {
        "httpStatus" : {
          "type" : "string",
          "description" : "Implicit, but still included.",
          "example" : "400"
        },
        "errorNumber" : {
          "type" : "number",
          "description" : "DNB's error number",
          "example" : 1234
        },
        "errorMessage" : {
          "type" : "string",
          "description" : "Explanation",
          "example" : "Computer says no"
        },
        "errorDocumentation" : {
          "type" : "string",
          "description" : "URI to developer documentation for this error",
          "example" : "https://docs.example.com/help-for-this-endpoint/"
        },
        "errorDetails" : {
          "type" : "array",
          "description" : "Details about the cause of this error. Zero or more.",
          "items" : {
            "$ref" : "#/definitions/errorDetails"
          }
        }
      },
      "description" : "The HTTP status code (```httpStatus```) is the main classifier. A DNB-specific ```errorNumber```is also provided as a lookup reference. \n\nThe ```errorDocumentation``` is a URI to further information about the endpoint, with uesful infomration about correct usage.\n\nThe ```errorDetails```is specific information about the one or more errors that have occurred."
    },
    "errorDetails" : {
      "type" : "object",
      "required" : [ "errorNumber" ],
      "properties" : {
        "errorNumber" : {
          "type" : "string",
          "description" : "DNB's internal error number.",
          "example" : "5432"
        },
        "errorField" : {
          "type" : "string",
          "description" : "Name of field that caused the error.",
          "example" : "firstName"
        },
        "errorDescription" : {
          "type" : "string",
          "example" : "First name cannot have non-Latin characters."
        }
      },
      "description" : "Detailed explanation of the error. Used by ```error```."
    },
    "headerLinks" : {
      "type" : "object",
      "required" : [ "self" ],
      "properties" : {
        "previous" : {
          "type" : "string",
          "example" : "https://api.example.com/something-previous"
        },
        "self" : {
          "type" : "string",
          "example" : "https://api.example.com/something"
        },
        "next" : {
          "type" : "string",
          "example" : "https://api.example.com/next"
        }
      },
      "description" : "URIs for previous, this and next. Only this (self) is required, as previous and next may not exist).\n\nSee also global headers for pagination: ```pageNumber```and ```pageSize```."
    },
    "ecoProfileTravel" : {
      "type" : "object",
      "properties" : {
        "co2" : {
          "type" : "string",
          "description" : "Total CO2 in kg"
        },
        "nox" : {
          "type" : "string",
          "description" : "Total NOx in kg"
        },
        "distance" : {
          "type" : "string",
          "description" : "Kilometers"
        },
        "time" : {
          "type" : "string",
          "description" : "Hours"
        }
      }
    },
    "ecoProfileBuilding" : {
      "type" : "object",
      "properties" : {
        "county" : {
          "type" : "string",
          "description" : "11 digits"
        },
        "bnr" : {
          "type" : "integer",
          "description" : "Bruksnummer"
        },
        "gnr" : {
          "type" : "integer",
          "description" : "Gårdsnummer"
        },
        "overallScrore" : {
          "type" : "integer",
          "description" : "1-100"
        },
        "buildYear" : {
          "type" : "string",
          "format" : "date"
        },
        "energyRating" : {
          "type" : "string"
        },
        "co2Footprint" : {
          "type" : "string"
        },
        "climateNeutral" : {
          "type" : "boolean",
          "description" : "Yes/no"
        },
        "solarEnergyPercentage" : {
          "type" : "number",
          "description" : "How much of the building's energy is solar? 0-100%"
        },
        "greenRoofArea" : {
          "type" : "number",
          "description" : "Area of building that is covered with plants. Measured in square meters (m^2)."
        }
      },
      "description" : "A building's environmental profile. Aggregated and calculated data, which may be cached for fast access. The data is a suggestion, to be extended and improved."
    },
    "ecoProfile" : {
      "type" : "object",
      "properties" : {
        "customerId" : {
          "type" : "string",
          "description" : "11 digits"
        },
        "overallScrore" : {
          "type" : "integer",
          "description" : "1-100"
        },
        "transport" : {
          "type" : "object",
          "properties" : {
            "publicTransport" : {
              "type" : "string"
            },
            "carPollution" : {
              "type" : "string"
            },
            "annualTravel" : {
              "type" : "string"
            }
          }
        },
        "home" : {
          "type" : "object",
          "description" : "Data about the home",
          "properties" : {
            "homeBuilding" : {
              "type" : "string",
              "description" : "Envoronmental rate of home"
            },
            "homeElectricity" : {
              "type" : "string"
            }
          }
        },
        "work" : {
          "type" : "object",
          "description" : "Data about the workplace",
          "properties" : {
            "workBuilding" : {
              "type" : "string",
              "description" : "CO2 data of workplace"
            }
          }
        }
      },
      "description" : "A persons environmental profile. Aggregated and calculated data, which may be cached for fast access. The data is a suggestion, to be extended and improved."
    },
    "carDetails" : {
      "type" : "object",
      "required" : [ "environmentClass", "licenseNumber", "make", "modelYear", "registrationDate" ],
      "properties" : {
        "licenseNumber" : {
          "type" : "string",
          "description" : "License plate"
        },
        "registrationDate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "modelYear" : {
          "type" : "number",
          "description" : "2014"
        },
        "make" : {
          "type" : "string",
          "description" : "Audi"
        },
        "model" : {
          "type" : "string",
          "description" : "A4 Allroad"
        },
        "environmentClass" : {
          "type" : "string",
          "description" : "Euro 6L"
        },
        "fuelType" : {
          "type" : "string",
          "description" : "Gasoline"
        },
        "seats" : {
          "type" : "number",
          "description" : "5"
        },
        "particleFilter" : {
          "type" : "boolean",
          "description" : "False"
        },
        "fuelUseAverage" : {
          "type" : "string",
          "description" : "Liters per kilometer, or kW per kilometer. Depends on fuelType."
        },
        "fuelUseCity" : {
          "type" : "number",
          "description" : "Liters per kilometer, or kW per kilometer. Depends on fuelType."
        },
        "fuelUseCountry" : {
          "type" : "number",
          "description" : "Liters per kilometer, or kW per kilometer. Depends on fuelType."
        },
        "co2" : {
          "type" : "number",
          "description" : "Grams per kilometer"
        },
        "nox" : {
          "type" : "number",
          "description" : "Milligram per kilometer"
        }
      },
      "description" : "Infomration from the Norwegian DMV: https://www.vegvesen.no/Kjoretoy/Kjop+og+salg/Kj%C3%B8ret%C3%B8yopplysninger"
    }
  }
}