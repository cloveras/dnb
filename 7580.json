{
  "swagger" : "2.0",
  "info" : {
    "description" : "**Guidelines:**\n\n* Parameters: camelCase, starting with lowercase\n* Attributes of data objects: CamelCase, starting with uppercase\n\nTODO: Check internal guidelines and update if required.\n\n**Standards:**\n\nAPIs should use ISO and RFC standards. \n\n* Country: ISO 3166-1 alpha-2, eg \"NO\", \"US\", \"GB\": https://www.iso.org/standard/63546.html\n* Currency: ISO 4217: alpha 3-letter upcase e.g “NOK\", \"EUR”, \"USD\": https://www.iso.org/iso-4217-currency-codes.html\n* Date: ISO 8601, eg \"2017-11-02\" (day) and \"2017-11-02T14:09:15+00:00\" (timestamp):  www.iso.org/iso/home/standards/iso8601.htm\n* SWIFT BIC: ISO 9362: https://en.wikipedia.org/wiki/ISO_9362\n* IBAN ISO 13616:2007: https://www.iso.org/standard/41031.html\n* MCC: ISO 18245: https://www.iso.org/standard/33365.html (https://github.com/greggles/mcc-codes)\n\n**HTTP Response Codes**\n\nHTTP reponse codes in Open Bank may be more detailed than in Shared Sertvices and layers below. The HTTP reponses below is a good starting point, and may be updated if needed. \n\nSuccess\n\n* 200: OK, https://httpstatuses.com/200 / https://tools.ietf.org/html/rfc7231#section-6.3.1     \n* 201: Created, https://httpstatuses.com/201 / https://tools.ietf.org/html/rfc7231#section-6.3.2\n\nClient Error\n\n* 400: Bad Request, https://httpstatuses.com/400 / https://tools.ietf.org/html/rfc7231#section-6.5.1     \n* 401: Unauthorized, https://httpstatuses.com/401 / https://tools.ietf.org/html/rfc7235#section-3.1      \n* 403: Forbidden, https://httpstatuses.com/403 / https://tools.ietf.org/html/rfc7231#section-6.5.3     \n* 404: Not Found, https://httpstatuses.com/404 / https://tools.ietf.org/html/rfc7231#section-6.5.4      \n* 429: Too Many Requests, https://httpstatuses.com/429 / https://tools.ietf.org/html/rfc6585#section-4   \n\nServer Error\n\n* 500: Server Error, https://httpstatuses.com/500 / https://tools.ietf.org/html/rfc7231#section-6.6.1     \n* 503: Service Unavailable, https://httpstatuses.com/503 / https://tools.ietf.org/html/rfc7231#section-6.6.4\n* 504: Timeout, https://httpstatuses.com/504 / https://tools.ietf.org/html/rfc7231#section-6.6.5     \n\n**Github**\n\nhttps://github.com/cloveras/dnb/\n\n\n",
    "version" : "0.1",
    "title" : "7580: APIs for Third Parties - gateway layer",
    "termsOfService" : "http://developer.dnb.no/terms",
    "contact" : {
      "name" : "Christian Løverås",
      "url" : "https://dnb.no",
      "email" : "cl@dnb.no"
    }
  },
  "host" : "1gh7oej.restletmocks.net",
  "schemes" : [ "https" ],
  "consumes" : [ "application/json" ],
  "produces" : [ "application/json" ],
  "security" : [ {
    "OAuth2" : [ "read", "write" ]
  }, {
    "Basic authentication" : [ ]
  } ],
  "paths" : {
    "/customers/current" : {
      "get" : {
        "tags" : [ "Customers" ],
        "summary" : "View customer",
        "description" : "View customer details",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Customer found",
            "schema" : {
              "$ref" : "#/definitions/CustomerIndividual"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "503" : {
            "description" : "Service Unavailable",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "504" : {
            "description" : "Gateway Timeout",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/accounts" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "summary" : "Get all accounts for current user",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Account"
              }
            }
          },
          "404" : {
            "description" : "Status 404"
          }
        }
      }
    },
    "/accounts/{accountNumber}" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "summary" : "Get account details",
        "description" : "Returns Account.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "AccountNumber",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "$ref" : "#/definitions/AccountDetails"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "customerId unknown",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "503" : {
            "description" : "Service Unavailable",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "504" : {
            "description" : "Gateway Timeout",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "accountNumber",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/accounts/{accountNumber}/balances" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "summary" : "Get account balances",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "AccountNumber",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "$ref" : "#/definitions/AccountBalance"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "503" : {
            "description" : "Service Unavailable",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "504" : {
            "description" : "Gateway Timeout",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "accountNumber",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/accounts/{accountNumber}/transactions" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "summary" : "Get transaction list for account",
        "description" : "Optional query parameters below. Note: Sorting and filtering affects backend, and may change.\n\n* SortOrder: \"ASC\", \"DESC\"\n* DateFrom: \"YYYY-MM-DD\": ISO 8601: www.iso.org/iso/home/standards/iso8601.htm\n* DateTo: \"YYYY-MM-DD\": ISO 8601: www.iso.org/iso/home/standards/iso8601.htm\n* AmountMinimum: Include amount from (and including) this amount.\n* AmountMaximum: Include amount from (and including) this amount.\n* MCC: Include only this MCC code: ISO 18245: https://www.iso.org/standard/33365.html \n* FreeText: Filter by free text\n* IncludePending: **TODO:** Determine if this should be included, or refer to /payments/due/{accountNumber}",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SortOrder",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "description" : "\"Ascending\", \"Descending\""
        }, {
          "name" : "DateFrom",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "format" : "date",
          "description" : "Filter for start date (included). ISO 8601: www.iso.org/iso/home/standards/iso8601.htm"
        }, {
          "name" : "DateTo",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "format" : "date",
          "description" : "Filter for end date (included). ISO 8601: www.iso.org/iso/home/standards/iso8601.htm"
        }, {
          "name" : "AmountMinimum",
          "in" : "query",
          "required" : false,
          "type" : "number",
          "description" : "Filter for minimum amount (included)"
        }, {
          "name" : "AmountMaximum",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "description" : "Filter for maximum amount (included)"
        }, {
          "name" : "MCC",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "description" : "Filter for MCC"
        }, {
          "name" : "FreeText",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "description" : "Filter for free text"
        }, {
          "name" : "IncludePending",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "description" : "Should pending transactions be included?"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/AccountTransaction"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "503" : {
            "description" : "Service Unavailable",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "504" : {
            "description" : "Gateway Timeout",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "accountNumber",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/accounts/{accountNumber}/transactions/{transactionId}" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "summary" : "Get transaction specified by id",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "AccountNumber",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "$ref" : "#/definitions/AccountTransaction"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "503" : {
            "description" : "Service Unavailable",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "504" : {
            "description" : "Gateway Timeout",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "accountNumber",
        "in" : "path",
        "required" : true,
        "type" : "string"
      }, {
        "name" : "transactionId",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/cards" : {
      "get" : {
        "tags" : [ "Card" ],
        "summary" : "Get cards for a customer",
        "description" : "List over customers debet and credit cards",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SSN",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "description" : "Social Security Number",
          "x-example" : "NO 11-digits"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Card"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "503" : {
            "description" : "Service Unavailable",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "504" : {
            "description" : "Gateway Timeout",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cards/{cardId}/details" : {
      "get" : {
        "tags" : [ "Card" ],
        "summary" : "Get card details",
        "description" : "Includes balance and credit limit (when applicable).",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "$ref" : "#/definitions/Card"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "503" : {
            "description" : "Service Unavailable",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "504" : {
            "description" : "Gateway Timeout",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "cardId",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/cards/{cardId)/transactions" : {
      "get" : {
        "tags" : [ "Card" ],
        "summary" : "Get card transactions",
        "description" : "Transactionlist for the customers creditcard",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/CardTransaction"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "503" : {
            "description" : "Service Unavailable",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "504" : {
            "description" : "Gateway Timeout",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cards/{cardId}/block" : {
      "patch" : {
        "tags" : [ "Card" ],
        "summary" : "Block card",
        "description" : "Aviability for end-customet to block a debit or credit card. (Not Cresco Cards)",
        "parameters" : [ {
          "name" : "SSN",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "description" : "Social Security Number"
        }, {
          "name" : "CardNumber",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "ReasonCode",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "description" : "Codes?"
        } ],
        "responses" : {
          "200" : {
            "description" : "The card is now blocked"
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "503" : {
            "description" : "Service Unavailable",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "504" : {
            "description" : "Gateway Timeout",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "cardId",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/cards/{cardId}/unblock" : {
      "patch" : {
        "tags" : [ "Card" ],
        "summary" : "Unblock card",
        "parameters" : [ {
          "name" : "SSN",
          "in" : "query",
          "required" : true,
          "type" : "string",
          "description" : "Social Security Number"
        }, {
          "name" : "CardNumber",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Unblock credit card",
          "in" : "header",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Unblocked",
            "headers" : {
              "Unblock" : {
                "type" : "string"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "503" : {
            "description" : "Service Unavailable",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "504" : {
            "description" : "Gateway Timeout",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "cardId",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/cards/{cardId}/invoice/{year}/{month}" : {
      "get" : {
        "tags" : [ "Card" ],
        "summary" : "Get card invoice",
        "description" : "Get card invoice form chosen month",
        "parameters" : [ {
          "name" : "CardNumber",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Year",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Month",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "$ref" : "#/definitions/CardInvoice"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "503" : {
            "description" : "Service Unavailable",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "504" : {
            "description" : "Gateway Timeout",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "cardId",
        "in" : "path",
        "required" : true,
        "type" : "string"
      }, {
        "name" : "year",
        "in" : "path",
        "required" : true,
        "type" : "string"
      }, {
        "name" : "month",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/payments" : {
      "post" : {
        "tags" : [ "Payments" ],
        "summary" : "Initiate payment",
        "description" : "Domestic payment with KID or message",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaymentInitiation"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/PaymentInitiation"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "503" : {
            "description" : "Service Unavailable",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "504" : {
            "description" : "Gateway Timeout",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/payments/{accountNumber}/due" : {
      "get" : {
        "tags" : [ "Payments" ],
        "summary" : "Get due payments by date range",
        "description" : "Gets all due payments, both domestic and international.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "AccountNumber",
          "in" : "query",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "startDate",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "format" : "date",
          "description" : "\"YYYY-MM-DD\": ISO 8601: www.iso.org/iso/home/standards/iso8601.htm"
        }, {
          "name" : "stopDate",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "format" : "date",
          "description" : "\"YYYY-MM-DD\": ISO 8601: www.iso.org/iso/home/standards/iso8601.htm"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Payment"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "503" : {
            "description" : "Service Unavailable",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "504" : {
            "description" : "Gateway Timeout",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "accountNumber",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/payments/{accountNumber}/due/{paymentId}" : {
      "get" : {
        "tags" : [ "Payments" ],
        "summary" : "Get due payment by payment id",
        "description" : "Returns Payment, complete with with PaymentDetails.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "PaymentID",
          "in" : "query",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "$ref" : "#/definitions/Payment"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "503" : {
            "description" : "Service Unavailable",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "504" : {
            "description" : "Gateway Tiimeout",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "accountNumber",
        "in" : "path",
        "required" : true,
        "type" : "string"
      }, {
        "name" : "paymentId",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/payments/{paymentId}" : {
      "delete" : {
        "tags" : [ "Payments" ],
        "summary" : "Delete",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Status 200"
          }
        }
      },
      "patch" : {
        "tags" : [ "Payments" ],
        "summary" : "Update existing payment",
        "description" : "A payment can be updatet until due dtae. \nPossible to udate :\n* Date (\"YYYY-MM-DD\", ISO 8601: www.iso.org/iso/home/standards/iso8601.htm)\n* Amount\n* Status (deactivate, reactivate)\n\nReturns the updated Payment.",
        "consumes" : [ ],
        "parameters" : [ {
          "name" : "body",
          "in" : "body",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Changed",
            "schema" : {
              "$ref" : "#/definitions/Payment"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "503" : {
            "description" : "Service Unavailable",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "504" : {
            "description" : "Gateway Timeout",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "paymentId",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/currency/convert/{base}/{currency}/{amount}" : {
      "get" : {
        "tags" : [ "Currency" ],
        "summary" : "Convert amount from CUR1 to CUR2",
        "description" : "Quite basic for now. Input welcome.",
        "parameters" : [ {
          "name" : "date",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "format" : "date",
          "description" : "End of day. ISO 8601: \"YYYY-MM-DD\": https://en.wikipedia.org/wiki/ISO_8601"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "503" : {
            "description" : "Service Unavailable",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "504" : {
            "description" : "Gateway Timeout",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "base",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "ISO 4217: alpha 3-letter upcase e.g EUR"
      }, {
        "name" : "currency",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "ISO 4217: alpha 3-letter upcase e.g EUR"
      }, {
        "name" : "amount",
        "in" : "path",
        "required" : true,
        "type" : "number"
      } ]
    },
    "/currency/list/{base}" : {
      "get" : {
        "tags" : [ "Currency" ],
        "summary" : "Get a list rates for the most common currencies, with a specified base",
        "description" : "Suitable for making a table or similar.\n\n```\n{\n    timestamp: 1504548341,\n    base: \"NOK\",\n    rates: {\n        AED: 3.672538,\n        AFN: 66.809999,\n        ALL: 125.716501,\n        AMD: 484.902502,\n        ANG: 1.788575,\n        AOA: 135.295998,\n        ARS: 9.750101,\n        AUD: 1.390866,\n        /* ... */\n    }\n}\n```",
        "parameters" : [ {
          "name" : "date",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "description" : "End of day. ISO 8601: “YYYY-MM-DD”: https://en.wikipedia.org/wiki/ISO_8601"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "503" : {
            "description" : "Service Unavailable",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "504" : {
            "description" : "Gateway Timeout",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "base",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "\"Home\" currency. ISO 4217: alpha 3-letter upcase e.g EUR"
      } ]
    },
    "/location/branch/findbyaddress" : {
      "get" : {
        "tags" : [ "Location" ],
        "summary" : "Find nearest branch by address",
        "description" : "Base geocoding functionality similar to Google Maps: https://developers.google.com/maps/documentation/geocoding/intro",
        "parameters" : [ {
          "name" : "address",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "description" : "For now: Assume geocoding functionality similar to Google Maps: https://developers.google.com/maps/documentation/geocoding/intro"
        } ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "$ref" : "#/definitions/Branch"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "503" : {
            "description" : "Service Unavailable",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "504" : {
            "description" : "Gateway Timeout",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/location/branch/{latitude}/{longditude}/" : {
      "get" : {
        "tags" : [ "Location" ],
        "summary" : "Find nearest branch by coordinates",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "$ref" : "#/definitions/Branch"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "503" : {
            "description" : "Service Unavailable",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "504" : {
            "description" : "Gateway Timeout",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "latitude",
        "in" : "path",
        "required" : true,
        "type" : "string"
      }, {
        "name" : "longditude",
        "in" : "path",
        "required" : true,
        "type" : "string"
      } ]
    },
    "/location/branch/{branchid}/details" : {
      "get" : {
        "tags" : [ "Location" ],
        "summary" : "Get branch details",
        "description" : "Contact information, opening hours, etc.",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "$ref" : "#/definitions/Branch"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "503" : {
            "description" : "Service Unavailable",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "504" : {
            "description" : "Gateway Timeout",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "branchid",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Id of branch"
      } ]
    },
    "/location/branch/{branchid}/openingtimes" : {
      "get" : {
        "tags" : [ "Location" ],
        "summary" : "Get a branch's opening times",
        "description" : "Opening times is also included in Branch.",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "$ref" : "#/definitions/OpeningTimes"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "503" : {
            "description" : "Service Unavailable",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "504" : {
            "description" : "Gateway Timeout",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "branchid",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Id of a branch"
      } ]
    },
    "/location/atm/{latitude}/{longditude}/" : {
      "get" : {
        "tags" : [ "Location" ],
        "summary" : "Find nearest ATM by coordinates",
        "description" : "If no details (as for now): Assume ATM is open 24h.",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ATM"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "503" : {
            "description" : "Service Unavailable",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "504" : {
            "description" : "Gateway Timeout",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "latitude",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Current latitude. Example: 37.4238253802915"
      }, {
        "name" : "longditude",
        "in" : "path",
        "required" : true,
        "type" : "string",
        "description" : "Current longditude. Example: -122.0842499"
      } ]
    },
    "/location/branches" : {
      "get" : {
        "tags" : [ "Location" ],
        "summary" : "Get list of all DNB branches",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Request succeeded",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Branch"
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "Forbidden",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "503" : {
            "description" : "Service Unavailable",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "504" : {
            "description" : "Gateway Timeout",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "securityDefinitions" : {
    "OAuth2" : {
      "type" : "oauth2",
      "authorizationUrl" : "https://api.dnb.no/oauth/authorize",
      "tokenUrl" : "https://api.dnb.no/oauth/token",
      "flow" : "accessCode",
      "scopes" : {
        "read" : "Read",
        "write" : "Write"
      }
    },
    "Basic authentication" : {
      "type" : "basic"
    }
  },
  "definitions" : {
    "CustomerIndividual" : {
      "type" : "object",
      "properties" : {
        "FirstName" : {
          "type" : "string",
          "description" : "First name"
        },
        "LastName" : {
          "type" : "string",
          "description" : "Surname"
        },
        "Address" : {
          "$ref" : "#/definitions/Address"
        },
        "Email" : {
          "type" : "string",
          "description" : "example@example.com"
        },
        "Phone" : {
          "type" : "string",
          "description" : "+47 91 50 48 00"
        },
        "CountryOfBirth" : {
          "type" : "string",
          "description" : "ISO 3166-1 alpha-2: https://www.iso.org/standard/63546.html"
        },
        "CountryCitizenships" : {
          "type" : "array",
          "description" : "ISO 3166-1 alpha-2: https://www.iso.org/standard/63546.html",
          "items" : {
            "type" : "string"
          }
        },
        "CountryTax" : {
          "type" : "array",
          "description" : "ISO 3166-1 alpha-2: https://www.iso.org/standard/63546.html",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "Account" : {
      "type" : "object",
      "properties" : {
        "AccountNumber" : {
          "type" : "string",
          "description" : "11 digits. Bank, etc can be determined from this: https://no.wikipedia.org/wiki/Kontonummer"
        },
        "Type" : {
          "type" : "string",
          "description" : "Examples:\n* Deposit\n* CreditCard\n* BSU\n* ASK"
        },
        "AccountName" : {
          "type" : "string",
          "description" : "Friendly name for the account: \"My savings account\", etc."
        },
        "BalanceAvailable" : {
          "type" : "number"
        },
        "AccountDetails" : {
          "$ref" : "#/definitions/AccountDetails"
        }
      },
      "description" : "A small test of embedded code:\n```\n{\n  \"AccountNumber\": \"string\",\n  \"Type\": \"string\",\n  \"AccountName\": \"string\",\n  \"BalanceAvailable\": \"number\",\n  \"AccountOwner\": \"string\",\n  \"AccountDetails\": {\n    \"AccountNumber\": \"string\",\n    \"IBAN\": \"string\",\n    \"BIC\": \"string\",\n    \"Currency\": \"string\",\n    \"Created\": \"string (date-time)\",\n    \"Updated\": \"string (date-time)\",\n    \"AccountInterestDetails\": {\n      \"AccountNumber\": \"string\",\n      \"InterestRate\": \"number\",\n      \"EarnedInterestToDate\": \"number\",\n      \"AccruedInterestAndFeesToDate\": \"number\",\n      \"FeesToDate\": \"string\",\n      \"AccruedInterestFromLastYear\": \"number\"\n    }\n  }\n}\n```"
    },
    "AccountDetails" : {
      "type" : "object",
      "properties" : {
        "AccountNumber" : {
          "type" : "string"
        },
        "IBAN" : {
          "type" : "string",
          "description" : "ISO 13616:2007: https://www.iso.org/standard/41031.html"
        },
        "BIC" : {
          "type" : "string",
          "description" : "ISO 9362: https://en.wikipedia.org/wiki/ISO_9362"
        },
        "Currency" : {
          "type" : "string",
          "description" : "Currency: ISO 4217: alpha 3-letter upcase e.g \"EUR\": https://www.iso.org/iso-4217-currency-codes.html"
        },
        "Created" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "ISO 8601: www.iso.org/iso/home/standards/iso8601.htm"
        },
        "Updated" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "ISO 8601: www.iso.org/iso/home/standards/iso8601.htm"
        },
        "AccountInterestDetails" : {
          "$ref" : "#/definitions/AccountInterestDetails"
        }
      },
      "description" : "Details for an Account."
    },
    "AccountInterestDetails" : {
      "type" : "object",
      "properties" : {
        "AccountNumber" : {
          "type" : "string"
        },
        "InterestRate" : {
          "type" : "number"
        },
        "EarnedInterestToDate" : {
          "type" : "number"
        },
        "AccruedInterestAndFeesToDate" : {
          "type" : "number"
        },
        "FeesToDate" : {
          "type" : "string"
        },
        "AccruedInterestFromLastYear" : {
          "type" : "number"
        }
      }
    },
    "AccountStatement" : {
      "type" : "object",
      "properties" : {
        "accountNumber" : {
          "type" : "string"
        },
        "year" : {
          "type" : "string"
        },
        "month" : {
          "type" : "string"
        },
        "transactions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AccountTransaction"
          }
        }
      },
      "description" : "Monthly account statement."
    },
    "AccountBalance" : {
      "type" : "object",
      "properties" : {
        "AccountNumber" : {
          "type" : "string"
        },
        "AmountAvailable" : {
          "type" : "number"
        },
        "AmountBook" : {
          "type" : "number"
        },
        "Timestamp" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "ISO 8601: www.iso.org/iso/home/standards/iso8601.htm"
        }
      }
    },
    "AccountTransaction" : {
      "type" : "object",
      "properties" : {
        "TransactionId" : {
          "type" : "string"
        },
        "Amount" : {
          "type" : "number"
        },
        "DateBooking" : {
          "type" : "string",
          "format" : "date"
        },
        "DateValue" : {
          "type" : "string",
          "format" : "date"
        },
        "Description" : {
          "type" : "string"
        },
        "Status" : {
          "type" : "string",
          "description" : "\"Booked\", \"Reserved\""
        },
        "MerchantName" : {
          "type" : "string"
        },
        "MCC" : {
          "type" : "string"
        }
      },
      "description" : "Very similar to CardTransaction. Should we merge AccountTransation and CardTransaction (both for debit and credit cards)?"
    },
    "Card" : {
      "type" : "object",
      "properties" : {
        "CardId" : {
          "type" : "string"
        },
        "CardType" : {
          "type" : "string",
          "description" : "\"Debit\", \"Credit\""
        },
        "MaskedCardNumber" : {
          "type" : "string"
        },
        "CardGroup" : {
          "type" : "string",
          "description" : "\"VISA\", \"MasterCard\", \"American Express\""
        },
        "AccountNumber" : {
          "type" : "string",
          "description" : "Debit and credit cards"
        },
        "CardStatus" : {
          "type" : "string",
          "description" : "\"Norm\", \"Active\", \"Blocked\""
        },
        "BlockCode" : {
          "type" : "string",
          "description" : "(If blocked)"
        },
        "ExpiryDate" : {
          "type" : "string",
          "format" : "date"
        },
        "DebitBalance" : {
          "$ref" : "#/definitions/AccountBalance"
        },
        "CreditBalance" : {
          "$ref" : "#/definitions/CardBalance"
        }
      }
    },
    "CardBalance" : {
      "type" : "object",
      "properties" : {
        "MaskedCardNumber" : {
          "type" : "string"
        },
        "Currency" : {
          "type" : "string"
        },
        "CreditLimit" : {
          "type" : "string"
        },
        "AmountAvailable" : {
          "type" : "number"
        },
        "AmountBook" : {
          "type" : "number"
        },
        "Timestamp" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "ISO 8601: www.iso.org/iso/home/standards/iso8601.htm"
        }
      },
      "description" : "Used by Card."
    },
    "CardTransaction" : {
      "type" : "object",
      "properties" : {
        "TransactionId" : {
          "type" : "string"
        },
        "Date" : {
          "type" : "string",
          "format" : "date"
        },
        "Amount" : {
          "type" : "number"
        },
        "TransactionDetails" : {
          "type" : "string",
          "description" : "Includes currency rate if applicable"
        },
        "Description" : {
          "type" : "string"
        }
      },
      "description" : "Very similar to AccountTransaction. Can they be merged? Should have MCC codes, etc"
    },
    "CardInvoice" : {
      "type" : "object",
      "properties" : {
        "Card" : {
          "$ref" : "#/definitions/Card"
        },
        "Year" : {
          "type" : "string",
          "description" : "YYYY"
        },
        "Month" : {
          "type" : "string",
          "description" : "MM, where January is 01"
        },
        "Amount" : {
          "type" : "string"
        },
        "DueDate" : {
          "type" : "string",
          "format" : "date"
        },
        "Account" : {
          "type" : "string",
          "description" : "Account to pay to"
        },
        "KID" : {
          "type" : "string"
        },
        "Transactions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CardTransaction"
          }
        }
      }
    },
    "Payment" : {
      "type" : "object",
      "required" : [ "PaymentId", "Status" ],
      "properties" : {
        "PaymentId" : {
          "type" : "string"
        },
        "DebitAccount" : {
          "type" : "string"
        },
        "CreditAccount" : {
          "type" : "string"
        },
        "Amount" : {
          "type" : "string"
        },
        "Type" : {
          "type" : "string"
        },
        "Date" : {
          "type" : "string",
          "format" : "date"
        },
        "Status" : {
          "type" : "string"
        },
        "PaymentDetails" : {
          "$ref" : "#/definitions/PaymentDetails"
        }
      },
      "description" : "Details about a payment. Used by:\n* /payments/due/{accountNumber}: Returning a list of payments, with _empty_ PaymentDetails\n* /payments/due/{accountNumber}/details: Returning a list of payments, with PaymentDetails\n\n```\n{\n  \"PaymentId\": \"string\",\n  \"DebitAccount\": \"string\",\n  \"CreditAccount\": \"string\",\n  \"Amount\": \"string\",\n  \"Type\": \"string\",\n  \"Date\": \"string (date)\",\n  \"Status\": \"string\",\n  \"PaymentDetails\": {\n    \"InvoiceReference\": \"string\"\n  }\n}\n```\n"
    },
    "PaymentDetails" : {
      "type" : "object",
      "properties" : {
        "InvoiceReference" : {
          "type" : "string",
          "description" : "Used for eFaktura"
        }
      },
      "description" : "More details about a payment. Some payment types have more data than others."
    },
    "PaymentInitiation" : {
      "type" : "object",
      "required" : [ "Amount", "CreditAccountNumber", "DebitAccountNumber", "Initiator", "PaymentDate", "Type" ],
      "properties" : {
        "Type" : {
          "type" : "string",
          "description" : "\"KID\", \"Message\", \"Transfer\""
        },
        "DebitAccountNumber" : {
          "type" : "string"
        },
        "CreditAccountNumber" : {
          "type" : "string"
        },
        "Amount" : {
          "type" : "number"
        },
        "PaymentDate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "Message" : {
          "type" : "string",
          "description" : "Used for both KID and Message, based on Type."
        },
        "Initiator" : {
          "type" : "string",
          "description" : "\"DNB\", \"Vipps\", \"IKEA\", \"Facebook\", etc"
        }
      },
      "description" : "Three types of payments\n* KID: Customer Identification (2-25 digits, including control digit)\n* Message: Text message describing the payment\n\nNot including the \"straksbetaling\" (imediate payment) flag, as this will be the default.\n\nPayment initiator: Part of the contxt object, but kept here too for reference. "
    },
    "Address" : {
      "type" : "object",
      "required" : [ "PostCity", "PostCode", "PostCountry" ],
      "properties" : {
        "PostalAddressLine1" : {
          "type" : "string",
          "description" : "Street name and number"
        },
        "PostalAddressLine2" : {
          "type" : "string"
        },
        "PostalAddressLine3" : {
          "type" : "string"
        },
        "PostCode" : {
          "type" : "string"
        },
        "PostCity" : {
          "type" : "string"
        },
        "PostCountry" : {
          "type" : "string"
        }
      },
      "description" : "Corresponds with address fields used internally in DNB. "
    },
    "Location" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Internal id"
        },
        "latitude" : {
          "type" : "number"
        },
        "longditude" : {
          "type" : "number"
        },
        "description" : {
          "type" : "string",
          "description" : "\"South entrance near elevators\""
        }
      },
      "description" : "Data object for physical location based on GPS coordinates. May be used for something that needs a more specific than an address provides, such as an ATM at a train station. A Location may be used in addition to an Address."
    },
    "Branch" : {
      "type" : "object",
      "properties" : {
        "Id" : {
          "type" : "string"
        },
        "Name" : {
          "type" : "string"
        },
        "PhoneNumber" : {
          "type" : "string"
        },
        "Email" : {
          "type" : "string"
        },
        "Address" : {
          "$ref" : "#/definitions/Address"
        },
        "OpeningTimes" : {
          "$ref" : "#/definitions/OpeningTimes"
        },
        "Location" : {
          "$ref" : "#/definitions/Location"
        }
      }
    },
    "ATM" : {
      "type" : "object",
      "properties" : {
        "Id" : {
          "type" : "string"
        },
        "Name" : {
          "type" : "string"
        },
        "Address" : {
          "$ref" : "#/definitions/Address"
        },
        "Location" : {
          "$ref" : "#/definitions/Location"
        },
        "OpeningTimes" : {
          "$ref" : "#/definitions/OpeningTimes"
        },
        "Currencies" : {
          "type" : "array",
          "description" : "Array of ISO 4217: alpha 3-letter upcase e.g \"EUR\": https://www.iso.org/iso-4217-currency-codes.html",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "OpeningTimes" : {
      "type" : "array",
      "description" : "Opening times for a branch, ATM, or something else.\n\nIf open 24 hours, use \"00:00\" both for OpeningTime and CloseTime.",
      "items" : {
        "type" : "object",
        "properties" : {
          "Day" : {
            "type" : "integer",
            "description" : "1: Monday, 2: Tuesday, etc"
          },
          "OpeningTime" : {
            "type" : "string",
            "description" : "\"HH:MM\": \"09:00\""
          },
          "CloseTime" : {
            "type" : "string",
            "description" : "\"HH:MM\": \"17:00\""
          }
        }
      }
    },
    "Error" : {
      "type" : "object",
      "properties" : {
        "ErrorNumber" : {
          "type" : "number",
          "description" : "DNB's error number. HTTP error implicit."
        },
        "ErrorMessage" : {
          "type" : "string",
          "description" : "Explanation"
        },
        "ErrorDocumentation" : {
          "type" : "string",
          "description" : "URI to developer documentation for this error"
        }
      }
    },
    "HeaderLinks" : {
      "type" : "object",
      "properties" : {
        "Previous" : {
          "type" : "string"
        },
        "Self" : {
          "type" : "string"
        },
        "Next" : {
          "type" : "string"
        }
      }
    }
  }
}